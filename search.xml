<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Anaconda 环境变量配置</title>
    <url>/2020/09/15/Anaconda-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>如果需要初始化虚拟环境则添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &gt;&gt;&gt; conda init &gt;&gt;&gt;</span></span><br><span class="line"><span class="comment"># !! Contents within this block are managed by &#x27;conda init&#x27; !!</span></span><br><span class="line">__conda_setup=<span class="string">&quot;<span class="subst">$(CONDA_REPORT_ERRORS=false &#x27;/Users/fan/anaconda3/bin/conda&#x27; shell.bash hook 2&gt; /dev/null)</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    \<span class="built_in">eval</span> <span class="string">&quot;<span class="variable">$__conda_setup</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/Users/fan/anaconda3/etc/profile.d/conda.sh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        . <span class="string">&quot;/Users/fan/anaconda3/etc/profile.d/conda.sh&quot;</span></span><br><span class="line">        CONDA_CHANGEPS1=<span class="literal">false</span> conda activate base</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        \<span class="built_in">export</span> PATH=<span class="string">&quot;/Users/fan/anaconda3/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">unset</span> __conda_setup</span><br><span class="line"><span class="comment"># &lt;&lt;&lt; conda init &lt;&lt;&lt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/Users/fan/anaconda3/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Bash 技巧</title>
    <url>/2020/12/27/Bash-%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="Bash-技巧"><a href="#Bash-技巧" class="headerlink" title="Bash 技巧"></a>Bash 技巧</h1><h1 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h1><h2 id="子命令扩展"><a href="#子命令扩展" class="headerlink" title="子命令扩展"></a>子命令扩展</h2><ol>
<li><p>$(…)可以扩展成另一个命令的运行结果，该命令的所有输出都会作为返回值。</p>
<p>$(…)可以嵌套，比如$(ls $(pwd))</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $(date)</span><br><span class="line">Tue Jan 28 00:01:13 CST 2020</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>还有另一种较老的语法，子命令放在反引号之中，也可以扩展成命令的运行结果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> `date`</span><br><span class="line">Tue Jan 28 00:01:13 CST 2020</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ol>
<li><p>环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">env</span><br><span class="line">printenv</span><br></pre></td></tr></table></figure>

<p>常见的环境变量：</p>
<ul>
<li><code>BASHPID</code>：Bash 进程的进程 ID。</li>
<li><code>BASHOPTS</code>：当前 Shell 的参数，可以用<code>shopt</code>命令修改。</li>
<li><code>DISPLAY</code>：图形环境的显示器名字，通常是<code>:0</code>，表示 X Server 的第一个显示器。</li>
<li><code>EDITOR</code>：默认的文本编辑器。</li>
<li><code>HOME</code>：用户的主目录。</li>
<li><code>HOST</code>：当前主机的名称。</li>
<li><code>IFS</code>：词与词之间的分隔符，默认为空格。</li>
<li><code>LANG</code>：字符集以及语言编码，比如<code>zh_CN.UTF-8</code>。</li>
<li><code>PATH</code>：由冒号分开的目录列表，当输入可执行程序名后，会搜索这个目录列表。</li>
<li><code>PS1</code>：Shell 提示符。</li>
<li><code>PS2</code>： 输入多行命令时，次要的 Shell 提示符。</li>
<li><code>PWD</code>：当前工作目录。</li>
<li><code>RANDOM</code>：返回一个0到32767之间的随机数。</li>
<li><code>SHELL</code>：Shell 的名字。</li>
<li><code>SHELLOPTS</code>：启动当前 Shell 的<code>set</code>命令的参数，参见《set 命令》一章。</li>
<li><code>TERM</code>：终端类型名，即终端仿真器所用的协议。</li>
<li><code>UID</code>：当前用户的 ID 编号。</li>
<li><code>USER</code>：当前用户的用户名。</li>
</ul>
<p>查看单个环境变量的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">printenv PATH</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li>
<li><p>自定义变量</p>
<p>自定义变量是用户在当前 Shell 里面自己定义的变量，必须先定义后使用，而且仅在当前 Shell 可用。一旦退出当前 Shell，该变量就不存在了。</p>
<p><code>set</code>命令可以显示所有变量（包括环境变量和自定义变量），以及所有的 Bash 函数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">set</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="创建变量"><a href="#创建变量" class="headerlink" title="创建变量"></a>创建变量</h2><p>用户创建变量的时候，变量名必须遵守下面的规则。</p>
<ul>
<li>字母、数字和下划线字符组成。</li>
<li>第一个字符必须是一个字母或一个下划线，不能是数字。</li>
<li>不允许出现空格和标点符号。</li>
</ul>
<p>变量声明的语法如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">variable=value</span><br></pre></td></tr></table></figure>

<p>上面命令中，等号左边是变量名，右边是变量。注意，<strong>等号两边不能有空格</strong>。</p>
<p>如果变量的值包含空格，则必须将值放在引号中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myvar=<span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>

<p>Bash 没有数据类型的概念，所有的变量值都是字符串。</p>
<h2 id="读取变量"><a href="#读取变量" class="headerlink" title="读取变量"></a>读取变量</h2><p>读取变量的时候，直接在变量名前加上<code>$</code>就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ foo=bar</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$foo</span></span><br><span class="line">bar</span><br></pre></td></tr></table></figure>

<p>每当 Shell 看到以<code>$</code>开头的单词时，就会尝试读取这个变量名对应的值。</p>
<p>如果变量不存在，Bash 不会报错，而会输出空字符。</p>
<h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h2><p><code>unset</code>命令用来删除一个变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> NAME</span><br></pre></td></tr></table></figure>

<p>这个命令不是很有用。因为不存在的 Bash 变量一律等于空字符串，所以即使<code>unset</code>命令删除了变量，还是可以读取这个变量，值为空字符串。</p>
<p>所以，删除一个变量，也可以将这个变量设成空字符串。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ foo=<span class="string">&#x27;&#x27;</span></span><br><span class="line">$ foo=</span><br></pre></td></tr></table></figure>

<p>上面两种写法，都是删除了变量<code>foo</code>。由于不存在的值默认为空字符串，所以后一种写法可以在等号右边不写任何值。</p>
<h2 id="输出变量-export-命令"><a href="#输出变量-export-命令" class="headerlink" title="输出变量 export 命令"></a>输出变量 export 命令</h2><p>用户创建的变量仅可用于当前 Shell，子 Shell 默认读取不到父 Shell 定义的变量。为了把变量传递给子 Shell，需要使用<code>export</code>命令。<strong>这样输出的变量，对于子 Shell 来说就是环境变量。</strong></p>
<p><code>export</code>命令用来向子 Shell 输出变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME=foo</span><br><span class="line"><span class="built_in">export</span> NAME</span><br></pre></td></tr></table></figure>

<p>上面命令输出了变量<code>NAME</code>。变量的赋值和输出也可以在一个步骤中完成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NAME=value</span><br></pre></td></tr></table></figure>

<p>上面命令执行后，当前 Shell 及随后新建的子 Shell，都可以读取变量<code>$NAME</code>。</p>
<p>子 Shell 如果修改继承的变量，不会影响父 Shell。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出变量 $foo</span></span><br><span class="line">$ <span class="built_in">export</span> foo=bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建子 Shell</span></span><br><span class="line">$ bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 $foo</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$foo</span></span><br><span class="line">bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改继承的变量</span></span><br><span class="line">$ foo=baz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出子 Shell</span></span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 $foo</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$foo</span></span><br><span class="line">bar</span><br></pre></td></tr></table></figure>

<p>上面例子中，子 Shell 修改了继承的变量<code>$foo</code>，对父 Shell 没有影响。</p>
<h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><ol>
<li><p><code>$?</code></p>
<p><code>$?</code>为上一个命令的退出码，用来判断上一个命令是否执行成功。返回值是<code>0</code>，表示上一个命令执行成功；如果是非零，上一个命令执行失败。</p>
</li>
<li><p><code>$$</code></p>
<p><code>$$</code>为当前 Shell 的进程 ID。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $$</span><br><span class="line">10662</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个特殊变量可以用来命名临时文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LOGFILE=/tmp/output_log.$$</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><h2 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h2><p>获取字符串长度的语法如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;#varname&#125;</span><br></pre></td></tr></table></figure>

<p>下面是一个例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ myPath=/home/cam/book/long.file.name</span><br><span class="line">$ echo $&#123;#myPath&#125;</span><br><span class="line">29</span><br></pre></td></tr></table></figure>

<h2 id="子字符串"><a href="#子字符串" class="headerlink" title="子字符串"></a>子字符串</h2><p>字符串提取子串的语法如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;varname:offset:length&#125;</span><br></pre></td></tr></table></figure>

<p>上面语法的含义是返回变量<code>$varname</code>的子字符串，从位置<code>offset</code>开始（从<code>0</code>开始计算），长度为<code>length</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ count=frogfootman</span><br><span class="line">$ echo $&#123;count:4:4&#125;</span><br><span class="line">foot</span><br></pre></td></tr></table></figure>

<p>如果省略<code>length</code>，则从位置<code>offset</code>开始，一直返回到字符串的结尾。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ count=frogfootman</span><br><span class="line">$ echo $&#123;count:4&#125;</span><br><span class="line">footman</span><br></pre></td></tr></table></figure>

<p>上面例子是返回变量<code>count</code>从4号位置一直到结尾的子字符串。</p>
<p>如果<code>offset</code>为负值，表示从字符串的末尾开始算起。注意，负数前面必须有一个空格， 以防止与<code>$&#123;variable:-word&#125;</code>的变量的设置默认值语法混淆。这时还可以指定<code>length</code>，<code>length</code>可以是正值，也可以是负值（负值不能超过<code>offset</code>的长度）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ foo=&quot;This string is long.&quot;</span><br><span class="line">$ echo $&#123;foo: -5&#125;</span><br><span class="line">long.</span><br><span class="line">$ echo $&#123;foo: -5:2&#125;</span><br><span class="line">lo</span><br><span class="line">$ echo $&#123;foo: -5:-2&#125;</span><br><span class="line">lon</span><br></pre></td></tr></table></figure>

<p>上面例子中，<code>offset</code>为<code>-5</code>，表示从倒数第5个字符开始截取，所以返回<code>long.</code>。如果指定长度<code>length</code>为<code>2</code>，则返回<code>lo</code>；如果<code>length</code>为<code>-2</code>，表示要排除从字符串末尾开始的2个字符，所以返回<code>lon</code>。</p>
<h1 id="Bash-启动环境"><a href="#Bash-启动环境" class="headerlink" title="Bash 启动环境"></a>Bash 启动环境</h1><ul>
<li><code>login shell</code> 登陆时走完整的会话构建流程, 比如 <code>tty1</code>~`tty6` 控制终端, 或者 ssh 远程登陆.</li>
<li><code>no login shell</code> 登陆时不需要走完整的会话构建流程, 比如 在 X11 图形环境下, 打开的终端窗口, 或者是在 Shell 下进入子 Shell 进程.</li>
</ul>
<p><strong>两者最大的区别</strong>:</p>
<ol>
<li> <code>login shell</code> 会执行 系统范围 <code>/etc/profile</code> 一直到用户环境的 <code>~/.bash_profile</code> 等等环境信息.</li>
<li> 而<code>no login shell</code>并不会执行系统范围的环境初始化流程,仅执行用户环境 <code>~/.bashrc</code> 初始化流程. <code>no login shell</code> 的系统环境信息是从父进程中集成过来的.</li>
</ol>
<p>注：比如在<code>/etc/profile.d</code>下添加了环境信息, Bash Shell 父进程如果没刷新, 直接进入 Bash Shell 子进程,那子进程也感知到最新环境信息, 确实要刷新的话, 需要手动初始化系统范围的环境信息, 比如执行 <code>source /etc/profile</code>或者 <code>. /etc/profile</code>.</p>
<p><code>source</code> 和 <code>.</code> 符号是等价的.</p>
<ul>
<li><code>/etc/profile</code> 系统范围的环境信息初始化, 在新的 <code>login shell</code> 构建过程中会激活该环境配置信息</li>
<li><code>/etc/bash.bashrc</code> 每个交互 Shell 初始化文件</li>
<li><code>/etc/bash.bash.logout</code> 系统范围<code>login shell</code>退出时的环境清理文件</li>
<li><code>~/.bash_profile</code> 每个 <code>login shell</code> 初始化过程,用户环境初始化配置文件.</li>
<li><code>~/.bashrc</code> 用户环境下交互 Shell 的环境初始化配置文件.</li>
<li><code>~/.bash_logout</code> <code>login shell</code> 退出时执行用户环境清理配置文件</li>
<li><code>~/.inputrc</code> 用户环境交互原信息配置信息, 比如定义一些交互快捷键</li>
</ul>
<h2 id="登录Session"><a href="#登录Session" class="headerlink" title="登录Session"></a>登录Session</h2><p>登录 Session 一般进行整个系统环境的初始化，启动的初始化脚本依次如下。</p>
<ol>
<li><p><code>/etc/profile</code>：所有用户的全局配置脚本，脚本中会执行<code>/etc/profile.d</code>目录里面所有<code>.sh</code>文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> /etc/profile.d/*.sh /etc/profile.d/sh.local ; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -r <span class="string">&quot;<span class="variable">$i</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;-#*i&#125;</span>&quot;</span> != <span class="string">&quot;$-&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">            . <span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            . <span class="string">&quot;<span class="variable">$i</span>&quot;</span> &gt;/dev/null</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>~/.bash_profile</code>：用户的个人配置脚本，这个脚本定义了一些最基本的环境变量，然后执行了<code>~/.bashrc</code>。(如果<code>~/.bash_profile</code>存在，则执行完就不再往下执行。）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span></span><br><span class="line">. ~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>~/.bash_login</code>：如果<code>~/.bash_profile</code>没找到，则尝试执行这个脚本（C shell 的初始化脚本）。如果该脚本存在，则执行完就不再往下执行。</li>
<li><code>~/.profile</code>：如果<code>~/.bash_profile</code>和<code>~/.bash_login</code>都没找到，则尝试读取这个脚本（Bourne shell 和 Korn shell 的初始化脚本）。</li>
</ul>
</li>
</ol>
<p>Linux 发行版更新的时候，会更新<code>/etc</code>里面的文件，比如<code>/etc/profile</code>，因此不要直接修改这个文件。如果想修改所有用户的登陆环境，就在<code>/etc/profile.d</code>目录里面新建<code>.sh</code>脚本。</p>
<h2 id="非登录Session"><a href="#非登录Session" class="headerlink" title="非登录Session"></a>非登录Session</h2><p>非登录 Session 的初始化脚本依次如下。</p>
<ol>
<li><p><code>~/.bashrc</code>：定义当前用户下的环境变量，其中会执行<code>/etc/bash.bashrc</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific aliases and functions</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> rm=<span class="string">&#x27;rm -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> cp=<span class="string">&#x27;cp -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> mv=<span class="string">&#x27;mv -i&#x27;</span></span><br><span class="line"><span class="comment"># Sodded by Anaconda3 4.4.0 installer</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/root/anaconda3/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">source</span> /root/.bashrcurce global definitions</span><br><span class="line"></span><br><span class="line">**<span class="keyword">if</span> [ -f /etc/bashrc ]; <span class="keyword">then</span></span><br><span class="line">	. /etc/bashrc</span><br><span class="line"><span class="keyword">fi</span>**</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 配置</title>
    <url>/2020/03/16/Git-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h1><h2 id="配置信息位置"><a href="#配置信息位置" class="headerlink" title="配置信息位置"></a>配置信息位置</h2><p><code>~/.gitconfig</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置git全局代理</span></span><br><span class="line">[http <span class="string">&quot;https://github.com&quot;</span>]</span><br><span class="line">	proxy = socks5://127.0.0.1:7890</span><br><span class="line">[user]</span><br><span class="line">	name = xxxxx</span><br><span class="line">	email = xxxxx</span><br></pre></td></tr></table></figure>
<span id="more"></span>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 安装配置</title>
    <url>/2021/03/24/Java-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Java-安装配置"><a href="#Java-安装配置" class="headerlink" title="Java 安装配置"></a>Java 安装配置</h1><h2 id="一、Mac-自带JRE"><a href="#一、Mac-自带JRE" class="headerlink" title="一、Mac 自带JRE"></a>一、Mac 自带JRE</h2><p>终端输入</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/usr/libexec/java_home -V</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Matching Java Virtual Machines (2):</span></span><br><span class="line"><span class="string">    1.8.281.09 (x86_64) &quot;Oracle Corporation&quot; - &quot;Java&quot; /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home</span></span><br><span class="line"><span class="string">    1.8.0_281 (x86_64) &quot;Oracle Corporation&quot; - &quot;Java SE 8&quot; /Library/Java/JavaVirtualMachines/jdk1.8.0_281.jdk/Contents/Home</span></span><br><span class="line"><span class="string">/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p> macOS 自带 JRE，而不是 JDK</p>
<p>选择目录 <code>/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home</code>，显示</p>
<p><img src="https://i.loli.net/2021/05/16/49kSeP3BtL8qKVj.png" alt="Java%20%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2057424c6814d946eaa916ccddd8bcdb9a/Untitled.png"></p>
<h2 id="二、安装-JDK-8"><a href="#二、安装-JDK-8" class="headerlink" title="二、安装 JDK 8"></a>二、安装 JDK 8</h2><ol>
<li><p>下载安装包安装</p>
</li>
<li><p>添加环境变量 </p>
<p>在 <code>.zshrc</code> 文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_281.jdk/Contents/Home</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fan@MacBook-Pro  ~  java -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_281&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1.8</span><span class="number">.0_281</span>-b09)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">25.281</span>-b09, mixed mode)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 正则表达式</title>
    <url>/2021/05/14/Java-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Class-Pattern"><a href="#Class-Pattern" class="headerlink" title="Class Pattern"></a>Class Pattern</h1><h2 id="Pattern-类-与-Matcher-类"><a href="#Pattern-类-与-Matcher-类" class="headerlink" title="Pattern 类 与 Matcher 类"></a>Pattern 类 与 Matcher 类</h2><h3 id="一、捕获组的概念"><a href="#一、捕获组的概念" class="headerlink" title="一、捕获组的概念"></a>一、捕获组的概念</h3><p>捕获组可以通过从左到右计算其开括号来编号，<strong>编号从 1 开始</strong>。例如，在表达式 ((A)(B(C))) 中，存在四个组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">((A)(B(C)))</span><br><span class="line">(A)</span><br><span class="line">(B(C))</span><br><span class="line">(C)</span><br></pre></td></tr></table></figure>

<p>组 0 代表整个表达式</p>
<span id="more"></span>

<h2 id="二、详解-Pattern-类与-Matcher-类"><a href="#二、详解-Pattern-类与-Matcher-类" class="headerlink" title="二、详解 Pattern 类与 Matcher 类"></a>二、详解 Pattern 类与 Matcher 类</h2><p>Java 正则表达式通过 <code>java.util.regex</code> 包下的 Pattern 类与 Matcher 类实现。</p>
<p>Pattern 类用于创建一个正则表达式，创建一个 pattern，构造方法是私有的，不能够直接创建，需要通过 <code>Pattern.compile(String regex)</code> 创建一个正则表达式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern p=Pattern.compile(<span class="string">&quot;\\w+&quot;</span>); </span><br><span class="line">p.pattern();<span class="comment">//返回 \w+</span></span><br></pre></td></tr></table></figure>

<p>pattern() 返回正则表达式的字符串形式，其实就是返回 Pattern.complile(String regex) 的 regex 参数。</p>
<h3 id="Pattern-matcher-CharSequence-input"><a href="#Pattern-matcher-CharSequence-input" class="headerlink" title="Pattern.matcher(CharSequence input)"></a><code>Pattern.matcher(CharSequence input)</code></h3><p>Pattern.matcher(CharSequence input)返回一个Matcher对象。</p>
<p>Matcher 类的构造方法是私有的，不能够随意创建，只能通过该方法获取该类的实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern p=Pattern.compile(<span class="string">&quot;\\d+&quot;</span>); </span><br><span class="line">Matcher m=p.matcher(<span class="string">&quot;22bb23&quot;</span>); </span><br><span class="line">m.pattern();<span class="comment">//返回p 也就是返回该Matcher对象是由哪个Pattern对象的创建的</span></span><br></pre></td></tr></table></figure>

<h3 id="Mathcer-start-Matcher-end-Matcher-group"><a href="#Mathcer-start-Matcher-end-Matcher-group" class="headerlink" title="Mathcer.start()/ Matcher.end()/ Matcher.group()"></a>Mathcer.start()/ Matcher.end()/ Matcher.group()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern p=Pattern.compile(<span class="string">&quot;([a-z]+)(\\d+)&quot;</span>); </span><br><span class="line">Matcher m=p.matcher(<span class="string">&quot;aaa2223bb&quot;</span>); </span><br><span class="line">**m.find();   <span class="comment">//匹配aaa2223** </span></span><br><span class="line">m.groupCount();   <span class="comment">//返回2,因为有2组 </span></span><br><span class="line">m.start(<span class="number">1</span>);   <span class="comment">//返回0 返回第一组匹配到的子字符串在字符串中的索引号 </span></span><br><span class="line">m.start(<span class="number">2</span>);   <span class="comment">//返回3 </span></span><br><span class="line">m.end(<span class="number">1</span>);   <span class="comment">//返回3 返回第一组匹配到的子字符串的最后一个字符在字符串中的索引位置. </span></span><br><span class="line">m.end(<span class="number">2</span>);   <span class="comment">//返回7 </span></span><br><span class="line">m.group(<span class="number">1</span>);   <span class="comment">//返回aaa,返回第一组匹配到的子字符串 </span></span><br><span class="line">m.group(<span class="number">2</span>);   <span class="comment">//返回2223,返回第二组匹配到的子字符串</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Jupyter Notebook 服务器</title>
    <url>/2021/03/20/Jupyter-Notebook-%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Jupyter-Notebook-服务器"><a href="#Jupyter-Notebook-服务器" class="headerlink" title="Jupyter Notebook 服务器"></a>Jupyter Notebook 服务器</h1><h2 id="1、-生成配置文件"><a href="#1、-生成配置文件" class="headerlink" title="1、 生成配置文件"></a>1、 生成配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">&gt;&gt; from notebook.auth import passwd</span><br><span class="line">&gt;&gt; passwd()</span><br><span class="line">Enter password: </span><br><span class="line">Verify password: </span><br><span class="line"><span class="string">&#x27;sha1:673a8456a8e8:4377bd9ee8dc33d4cb5a2011f7a89643de15c11c&#x27;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="2、设置配置文件"><a href="#2、设置配置文件" class="headerlink" title="2、设置配置文件"></a>2、设置配置文件</h2><p>可以直接修改配置文件 <code>~/.jupyter/jupyter_notebook_config.py</code> ，但需要改动到默认的配置文件中。</p>
<p>也可以自行创建一个配置文件 <code>~/.jupyter/jupyter_config.py</code>，然后在运行 Jupyter Notebook 的时候动态加载配置信息。</p>
<p>配置内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.ip = <span class="string">&#x27;localhost&#x27;</span> <span class="comment"># 指定</span></span><br><span class="line">c.NotebookApp.open_browser = <span class="literal">False</span> <span class="comment"># 关闭自动打开浏览器</span></span><br><span class="line">c.NotebookApp.port = <span class="number">8899</span> <span class="comment"># 端口随意指定</span></span><br><span class="line">c.NotebookApp.password = <span class="string">u&#x27;sha1:37e84432f5a9:c373b2bcbb673b6ffc0fb9593251db76872500d9&#x27;</span> <span class="comment"># 复制前一步生成的密钥</span></span><br><span class="line">c.NotebookApp.notebook_dir = <span class="string">u&#x27;/mnt/sda1/fanchl/&#x27;</span> <span class="comment"># 配置默认目录</span></span><br></pre></td></tr></table></figure>

<h2 id="3、启动-Jupyter"><a href="#3、启动-Jupyter" class="headerlink" title="3、启动 Jupyter"></a>3、启动 Jupyter</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook --no-browser --ip=0.0.0.0 --port=8899 --allow-root --config=~/.jupyter/jupyter_config.py</span><br></pre></td></tr></table></figure>

<p>这样还存在一个问题，就是一旦关闭终端，Jupyter 程序也就终止了运行。这是因为该 Jupyter 程序作为当前终端的子进程，在用户终端关闭的时候将收到一个 hangup 信号，从而被关闭。</p>
<p>所以为了让程序能忽视 hangup 信号，可以使用 <code>nohup</code> 命令。同时还要配合 <code>&amp;</code> 来将程序放入后台运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup jupyter notebook --no-browser --ip=0.0.0.0 --port=8899 --allow-root --config=~/.jupyter/jupyter_config.py &amp;</span><br></pre></td></tr></table></figure>

<p><strong>查看运行的后台进程</strong></p>
<p><code>jobs -l</code>  命令查看当前终端中后台运行的进程，如果关闭终端后不能再显示了，需要使用ps命令。</p>
<p><code>ps -aux | grep jupyter</code>  查看运行的 <code>jupyter</code> 进程</p>
<p>a:显示所有程序</p>
<p>u:以用户为主的格式来显示</p>
<p>x:显示所有程序，不以终端机来区分</p>
<p><code>kill -9 pid</code>  关闭运行中的 jupyter notebook。</p>
<p><strong>查看端口占用情况</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">lsof -i:<span class="number">8899</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Jupyter Notebook</tag>
        <tag>远程连接</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter Notebook 选择Kernel</title>
    <url>/2021/03/20/Jupyter-Notebook-%E9%80%89%E6%8B%A9Kernel/</url>
    <content><![CDATA[<h1 id="选择-Kernel"><a href="#选择-Kernel" class="headerlink" title="选择 Kernel"></a>选择 Kernel</h1><h2 id="一、创建对应-conda-环境的-kernel"><a href="#一、创建对应-conda-环境的-kernel" class="headerlink" title="一、创建对应 conda 环境的 kernel"></a>一、创建对应 conda 环境的 kernel</h2><h3 id="激活-conda-环境"><a href="#激活-conda-环境" class="headerlink" title="激活 conda 环境"></a>激活 conda 环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> activate 环境名称</span><br></pre></td></tr></table></figure>

<h3 id="安装-ipykernel"><a href="#安装-ipykernel" class="headerlink" title="安装 ipykernel"></a>安装 <code>ipykernel</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install ipykernel</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="将环境写入-notebook-的-kernel-中"><a href="#将环境写入-notebook-的-kernel-中" class="headerlink" title="将环境写入 notebook 的 kernel 中"></a>将环境写入 notebook 的 kernel 中</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m ipykernel install --user --name 环境名称 --display-name <span class="string">&quot;conda (环境名称)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python -m ipykernel install --user --name DeepLog --display-name &quot;conda (DeepLog)&quot;</span></span><br></pre></td></tr></table></figure>

<p>会在 <code>~/.local/share/jupyter/kernels/</code> 生成 <code>deeplog</code> 文件夹，其中有 <code>kernel.json</code> 文件 </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;argv&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;/mnt/sda1/fanchl/anaconda3/envs/Deeplog/bin/python&quot;</span>,</span><br><span class="line">  <span class="string">&quot;-m&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ipykernel_launcher&quot;</span>,</span><br><span class="line">  <span class="string">&quot;-f&quot;</span>,</span><br><span class="line">  <span class="string">&quot;&#123;connection_file&#125;&quot;</span></span><br><span class="line"> ],</span><br><span class="line"> <span class="attr">&quot;display_name&quot;</span>: <span class="string">&quot;conda(DeepLog)&quot;</span>,</span><br><span class="line"> <span class="attr">&quot;language&quot;</span>: <span class="string">&quot;python&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、删除指定-kernel"><a href="#二、删除指定-kernel" class="headerlink" title="二、删除指定 kernel"></a>二、删除指定 kernel</h2><h3 id="1、查看所有核心"><a href="#1、查看所有核心" class="headerlink" title="1、查看所有核心"></a>1、查看所有核心</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter kernelspec list</span><br></pre></td></tr></table></figure>

<h3 id="2、卸载指定核心"><a href="#2、卸载指定核心" class="headerlink" title="2、卸载指定核心"></a>2、卸载指定核心</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter kernelspec remove kernel_name</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Jupyter Notebook</tag>
        <tag>远程连接</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTex 常用模板</title>
    <url>/2020/10/22/LaTex-%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h2 id="开篇模板"><a href="#开篇模板" class="headerlink" title="开篇模板"></a>开篇模板</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\documentclass&#123;ctexart&#125;</span><br><span class="line">\title&#123;&#125;</span><br><span class="line">\author&#123;&#125;</span><br><span class="line">\date&#123;&#125;</span><br><span class="line">\usepackage&#123;geometry&#125;</span><br><span class="line">\usepackage[breaklinks=true,bookmarks=false]&#123;hyperref&#125;</span><br><span class="line">\geometry&#123;a4paper,scale=0.7&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">    \maketitle</span><br><span class="line">    \large</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="创建参考文献"><a href="#创建参考文献" class="headerlink" title="创建参考文献"></a>创建参考文献</h1><p>添加 <code>name.bib</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\documentclass&#123;ctexart&#125;</span><br><span class="line">\title&#123;&#125;</span><br><span class="line">\author&#123;&#125;</span><br><span class="line">\date&#123;&#125;</span><br><span class="line">\usepackage&#123;geometry&#125;</span><br><span class="line">\usepackage[breaklinks=true,bookmarks=false]&#123;hyperref&#125;</span><br><span class="line">\geometry&#123;a4paper,scale=0.7&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">    \maketitle</span><br><span class="line">    \large</span><br><span class="line"></span><br><span class="line">\bibliographystyle&#123;unsrt&#125;</span><br><span class="line">\bibliography&#123;name.bib&#125;</span><br><span class="line">\end&#123;document&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在正文中通过 <code>\cite&#123;&#125;</code>来引用</p>
<p>同时需要更改编译方式</p>
]]></content>
      <tags>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTex 环境配置 (MacTex &amp; VsCode)</title>
    <url>/2020/10/21/LaTex-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-MacTex-VsCode/</url>
    <content><![CDATA[<h1 id="环境配置-MacTex-VS-Code"><a href="#环境配置-MacTex-VS-Code" class="headerlink" title="环境配置 MacTex + VS Code"></a>环境配置 MacTex + VS Code</h1><ol>
<li><p>下载安装MacTex和VSCode</p>
<p><img src="https://i.loli.net/2021/05/16/lyGJSORTYKa6zbx.png" alt="%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%20MacTex%20+%20VS%20Code%20fb5f49e21c274303880bfca168d097cf/Untitled.png"></p>
</li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>在VSCode内安装 LaTeX Workshop 插件</p>
<p><img src="https://i.loli.net/2021/05/16/Is4HgWi7j1CBDoS.png" alt="%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%20MacTex%20+%20VS%20Code%20fb5f49e21c274303880bfca168d097cf/Untitled%201.png"></p>
</li>
<li><p>修改VSCode中的 settings.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;workbench.colorTheme&quot;</span>: <span class="string">&quot;One Dark Pro&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;terminal.integrated.shell.osx&quot;</span>: <span class="string">&quot;/bin/zsh&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;terminal.integrated.fontFamily&quot;</span>: <span class="string">&quot;Menlo for Powerline&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.autoBuild.run&quot;</span>: <span class="string">&quot;onSave&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;latex-workshop.showContextMenu&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;latex-workshop.intellisense.package.enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;latex-workshop.message.error.show&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;latex-workshop.message.warning.show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.tools&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span>,</span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;pdflatex&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;pdflatex&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span>,</span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;latexmk&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;latexmk&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-pdf&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-outdir=%OUTDIR%&quot;</span>,</span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.recipes&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;XeLaTeX&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PDFLaTeX&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BibTeX&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LaTeXmk&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;latexmk&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;xelatex -&gt; bibtex -&gt; xelatex*2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.clean.fileTypes&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;*.aux&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.bbl&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.blg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.idx&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.ind&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.lof&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.lot&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.out&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.toc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.acn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.acr&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.alg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.glg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.glo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.gls&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.ist&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.fls&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.log&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.fdb_latexmk&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.autoClean.run&quot;</span>: <span class="string">&quot;onFailed&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.recipe.default&quot;</span>: <span class="string">&quot;lastUsed&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;latex-workshop.view.pdf.internal.synctex.keybinding&quot;</span>: <span class="string">&quot;double-click&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;workbench.iconTheme&quot;</span>: <span class="string">&quot;material-icon-theme&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;python.defaultInterpreterPath&quot;</span>: <span class="string">&quot;/Users/fan/anaconda3/envs/ML/bin/python&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;workbench.startupEditor&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;git.confirmSync&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;workbench.editorAssociations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;viewType&quot;</span>: <span class="string">&quot;jupyter.notebook.ipynb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;filenamePattern&quot;</span>: <span class="string">&quot;*.ipynb&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常用指令</title>
    <url>/2020/08/11/Linux-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Linux-常用指令"><a href="#Linux-常用指令" class="headerlink" title="Linux 常用指令"></a>Linux 常用指令</h1><h2 id="文件夹"><a href="#文件夹" class="headerlink" title="文件夹"></a>文件夹</h2><p>bin：存储的二进制文件 可以被运行<br>dev：主要存放一些外接设备，不能直接被使用，需要被挂载<br>etc：存储一些配置文件<br>home：表示除了root用户之外的其他用户的主目录<br>proc：process，存储linux运行时候的进程<br>mnt：当外接设备需要挂载的时候，挂载到mnt目录<br>root：root用户的目录<br>sbin：super binary，存放一些可以被执行的二进制文件，但是只有超级管理员才能够执行<br>tmp：temporary，临时文件<br>usr：存放用户自己安装的软件<br>var：程序/系统的日志文件</p>
<span id="more"></span>

<h1 id="指令主体-选项-操作对象"><a href="#指令主体-选项-操作对象" class="headerlink" title="指令主体 [选项] [操作对象]"></a>指令主体 [选项] [操作对象]</h1><ul>
<li>一个指令可以包含多个选项</li>
<li>操作对象可以是多个</li>
</ul>
<h2 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h2><h3 id="1、ls"><a href="#1、ls" class="headerlink" title="1、ls"></a>1、ls</h3><ol>
<li><p>ls</p>
</li>
<li><p>ls 路径</p>
<p>相对路径：./当前目录 ../上一级目录下</p>
</li>
<li><p>ls 选项 路径 列出指定路径下的文件/文件夹的名称，并已指定的格式显示</p>
<ul>
<li>#ls -l 路径 以详细列表显示</li>
<li>#ls -a 路径 显示所有文件/文件夹，包含隐藏的（隐藏文档一般以“.”开头）</li>
</ul>
</li>
<li><p>ls -lh</p>
</li>
</ol>
<h3 id="2、pwd"><a href="#2、pwd" class="headerlink" title="2、pwd"></a>2、pwd</h3><ol>
<li>pwd (print working directory)</li>
</ol>
<h3 id="3、cd"><a href="#3、cd" class="headerlink" title="3、cd"></a>3、cd</h3><ol>
<li>cd 路径 （cd ~）</li>
</ol>
<h3 id="4、mkdir"><a href="#4、mkdir" class="headerlink" title="4、mkdir"></a>4、mkdir</h3><ol>
<li>mkdir 路径</li>
<li>mkdir -p 路径 （可以一次性创建不存在的母目录）</li>
<li>mkdir 路径1 路径2 路径3 …</li>
</ol>
<h3 id="5、touch"><a href="#5、touch" class="headerlink" title="5、touch"></a>5、touch</h3><ol>
<li>touch 文件路径</li>
</ol>
<h3 id="6、cp"><a href="#6、cp" class="headerlink" title="6、cp"></a>6、cp</h3><ol>
<li>cp 被复制文件的路径 目标路径</li>
<li>cp -r 被复制文件夹的路径 目标路径</li>
</ol>
<h3 id="7、mv"><a href="#7、mv" class="headerlink" title="7、mv"></a>7、mv</h3><ol>
<li>mv 被移动文件路径 目标路径</li>
</ol>
<h3 id="8、rm"><a href="#8、rm" class="headerlink" title="8、rm"></a>8、rm</h3><ol>
<li>rm 选项 需要移除的文档路径</li>
<li>(-f force 强制)</li>
</ol>
<h3 id="9、vim"><a href="#9、vim" class="headerlink" title="9、vim"></a>9、vim</h3><ol>
<li>vim 文件路径（文件可以存在，也可以不存在）</li>
</ol>
<h3 id="10、输出重定向"><a href="#10、输出重定向" class="headerlink" title="10、输出重定向"></a>10、输出重定向</h3><ol>
<li><blockquote>
<p>覆盖输出，覆盖原始的文件内容</p>
</blockquote>
</li>
<li><blockquote>
<blockquote>
<p>追加输出，在末尾继续添加</p>
</blockquote>
</blockquote>
</li>
<li><p>指令 &gt;/&gt;&gt; 文件路径</p>
</li>
</ol>
<h3 id="11、cat"><a href="#11、cat" class="headerlink" title="11、cat"></a>11、cat</h3><ol>
<li>直接打开一个文件查看</li>
<li>可以合并多个文件</li>
<li>cat 待合并的文件路径1 待合并的文件路径2 &gt; 新文件路径</li>
</ol>
<h2 id="进阶指令"><a href="#进阶指令" class="headerlink" title="进阶指令"></a>进阶指令</h2><h3 id="1、df-查看磁盘空间"><a href="#1、df-查看磁盘空间" class="headerlink" title="1、df 查看磁盘空间"></a>1、df 查看磁盘空间</h3><ol>
<li>df -h</li>
</ol>
<h3 id="2、free"><a href="#2、free" class="headerlink" title="2、free"></a>2、free</h3><ol>
<li><p>free -m </p>
<p>以MB为单位查看内存使用情况</p>
</li>
</ol>
<h3 id="3、head"><a href="#3、head" class="headerlink" title="3、head"></a>3、head</h3><ol>
<li><p>head -n 文件路径</p>
<p>查看一个文件的前n行，如果不指定n，则默认显示前10行</p>
</li>
</ol>
<h3 id="4、tail"><a href="#4、tail" class="headerlink" title="4、tail"></a>4、tail</h3><ol>
<li><p>tail -n 文件路径</p>
<p>查看一个文件的后n行，如果不指定n，则默认显示后10行</p>
</li>
<li><p>tail -f 文件路径</p>
<p>用tail指令来查看一个文件的动态变化（查看系统日志）</p>
</li>
</ol>
<h3 id="5、less"><a href="#5、less" class="headerlink" title="5、less"></a>5、less</h3><ol>
<li><p>less 文件路径</p>
<p>查看文件，以较少的内容进行输出，按下辅助功能键查看更多</p>
</li>
</ol>
<h3 id="6、wc"><a href="#6、wc" class="headerlink" title="6、wc"></a>6、wc</h3><ol>
<li><p>wc -lwc 文件路径</p>
<p>统计文件内容信息（包括行数、单词数、字节数）</p>
</li>
</ol>
<h3 id="7、date"><a href="#7、date" class="headerlink" title="7、date"></a>7、date</h3><ol>
<li><p>#date</p>
<p>输出形式：2020年 07月 16日 星期四 21:07:01 CST</p>
</li>
<li><p>#date +%F </p>
<p>输出形式：2020-07-16</p>
</li>
<li><p>#date ”+%F %T“ </p>
<p>%F：完整的年月日, %T：完整的时分秒</p>
</li>
<li><p>#date -d “-1 day/month/year” “+%Y-%m-%d %H:%M:%S”</p>
<p>获取之前或之后某个时间（备份）</p>
</li>
</ol>
<h3 id="8、cal-用来操作日历"><a href="#8、cal-用来操作日历" class="headerlink" title="8、cal 用来操作日历"></a>8、cal 用来操作日历</h3><ol>
<li>cal  &lt; == &gt; cal -1</li>
<li>cal -3</li>
<li>cal -y 2020</li>
</ol>
<h3 id="9、clear-ctrl-L"><a href="#9、clear-ctrl-L" class="headerlink" title="9、clear/ctrl+L"></a>9、clear/ctrl+L</h3><ul>
<li>清除终端信息</li>
</ul>
<h3 id="10、管道"><a href="#10、管道" class="headerlink" title="10、管道"></a>10、管道</h3><ol>
<li>#ls /| grep y<ul>
<li>以管道为分界线，管道前面的输出就是后面指定的输入</li>
<li>grep：过滤</li>
</ul>
</li>
<li>管道一般可以用于”过滤“，”特殊“，”扩展处理“</li>
<li>管道不能单独使用，必须配合其他指令，起辅助作用</li>
</ol>
<h2 id="高级指令"><a href="#高级指令" class="headerlink" title="高级指令"></a>高级指令</h2><h3 id="1、hostname"><a href="#1、hostname" class="headerlink" title="1、hostname"></a>1、hostname</h3><ol>
<li><p>hostname</p>
<p>当前主机名</p>
</li>
<li><p>hostname -f </p>
<p>当前主机名中的FQDN</p>
</li>
</ol>
<h2 id="2、id"><a href="#2、id" class="headerlink" title="2、id"></a>2、id</h2><ul>
<li>查看用户的一些基本信息</li>
</ul>
<h3 id="3、whoami"><a href="#3、whoami" class="headerlink" title="3、whoami"></a>3、whoami</h3><ul>
<li>般用于shell脚本，方便记录日志</li>
</ul>
<h3 id="4、ps-ef"><a href="#4、ps-ef" class="headerlink" title="4、ps -ef"></a>4、ps -ef</h3><ul>
<li>查看服务器的进程信息</li>
<li>-e: 列出全部的进程<br>-f：列出全部的列</li>
<li>ps -ef|grep xx</li>
</ul>
<h3 id="5、top"><a href="#5、top" class="headerlink" title="5、top"></a>5、top</h3><ul>
<li>查看服务器进程占用的资源</li>
</ul>
<h3 id="6、du-sh"><a href="#6、du-sh" class="headerlink" title="6、du -sh"></a>6、du -sh</h3><ul>
<li>查看目录的真实大小</li>
<li>-s：显示汇总的大小<br>-h：以较高可读性显示</li>
<li>du -s * | sort -nr  查看当前目录下文件大小并排序</li>
</ul>
<h3 id="7、find"><a href="#7、find" class="headerlink" title="7、find"></a>7、find</h3><ol>
<li><p>find 路径范围 选项 选项的值</p>
</li>
<li><p>选项</p>
<ul>
<li>-name：按文档名称搜索（支持模糊搜索）<br>-type：按文档类型进行搜索</li>
</ul>
</li>
<li><p>find / -name *.conf | wc -l<br>find Desktop -type f | wc -l<br>find Desktop -type d| wc -l</p>
</li>
</ol>
<h3 id="8、service"><a href="#8、service" class="headerlink" title="8、service"></a>8、service</h3><ul>
<li>控制一些软件的服务的启动/停止/重启</li>
<li>service 服务名 start/stop/restart</li>
</ul>
<h3 id="9、kill"><a href="#9、kill" class="headerlink" title="9、kill"></a>9、kill</h3><ol>
<li>kill 进程id</li>
<li>killall 进程名称</li>
</ol>
<h3 id="10、ifconfig"><a href="#10、ifconfig" class="headerlink" title="10、ifconfig"></a>10、ifconfig</h3><ul>
<li>获取网卡信息</li>
</ul>
<h3 id="11、reboot"><a href="#11、reboot" class="headerlink" title="11、reboot"></a>11、reboot</h3><ul>
<li>重新启动计算机</li>
<li>reboot -w 模拟重启，但是不重启（只写开机和关机的日志信息）</li>
</ul>
<h3 id="12、shutdown"><a href="#12、shutdown" class="headerlink" title="12、shutdown"></a>12、shutdown</h3><ul>
<li>关机</li>
</ul>
<h3 id="13、uptime"><a href="#13、uptime" class="headerlink" title="13、uptime"></a>13、uptime</h3><ul>
<li>输出计算机持续在线时间</li>
</ul>
<h3 id="14、uname"><a href="#14、uname" class="headerlink" title="14、uname"></a>14、uname</h3><ol>
<li><p>uname</p>
<p>获取操作系统的类型</p>
</li>
<li><p>uname -a </p>
<p>获取全部的系统信息（类型，全部主机名、内核版本、发布时间、开源计划）</p>
</li>
</ol>
<h3 id="15、netstat-tnlp"><a href="#15、netstat-tnlp" class="headerlink" title="15、netstat -tnlp"></a>15、netstat -tnlp</h3><ul>
<li>netstat -tnlp 查看网络连接状态</li>
<li>-t：只列出ftcp协议的连接<br>-n：将地址从字母组合转化成ip地址，将协议转化成端口号来显示<br>-l：过滤出“state”为listen（监听）的连接<br>-p：表示显示发起连接的进程的PID和进程名称</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 安装配置</title>
    <url>/2021/03/24/Maven%20%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Maven-安装配置"><a href="#Maven-安装配置" class="headerlink" title="Maven 安装配置"></a>Maven 安装配置</h1><h2 id="一、下载-Maven"><a href="#一、下载-Maven" class="headerlink" title="一、下载 Maven"></a>一、下载 Maven</h2><p>首先从 Maven 官方地址：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a> 下载最新版本apache-maven-xxx-bin.tar.gz</p>
<p>加下来将下载的文件解压到 /usr/local/maven 下。</p>
<span id="more"></span>

<h2 id="二、配置环境变量"><a href="#二、配置环境变量" class="headerlink" title="二、配置环境变量"></a>二、配置环境变量</h2><p>编辑 <code>.zshrc</code></p>
<p>添加如下的 maven 配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> M3_HOME=/usr/<span class="built_in">local</span>/maven/apache-maven-3.6.3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$M3_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<p>执行命令 <code>source .zshrc</code></p>
<h2 id="三、测试是否安装成功"><a href="#三、测试是否安装成功" class="headerlink" title="三、测试是否安装成功"></a>三、测试是否安装成功</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn -version</span><br></pre></td></tr></table></figure>

<h2 id="四、配置本地仓库与镜像"><a href="#四、配置本地仓库与镜像" class="headerlink" title="四、配置本地仓库与镜像"></a>四、配置本地仓库与镜像</h2><p>在安装的 maven 文件夹中，找到 <code>conf/settings.xml</code> </p>
<p><strong>添加本地仓库位置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/usr/local/maven/apache-maven-3.8.1/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>添加镜像</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun-maven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>          </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy</title>
    <url>/2020/08/24/Numpy/</url>
    <content><![CDATA[<h2 id="array属性"><a href="#array属性" class="headerlink" title="array属性"></a>array属性</h2><h3 id="array-矩阵"><a href="#array-矩阵" class="headerlink" title="array 矩阵"></a>array 矩阵</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]])  <span class="comment">#列表转化为矩阵</span></span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[1, 2, 3],</span></span><br><span class="line"><span class="string">       [2, 3, 4]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="array-ndim"><a href="#array-ndim" class="headerlink" title="array.ndim"></a>array.ndim</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;number of dim:&#x27;</span>,array.ndim)  <span class="comment"># 维度</span></span><br><span class="line"><span class="comment"># number of dim: 2</span></span><br></pre></td></tr></table></figure>

<h3 id="array-shape"><a href="#array-shape" class="headerlink" title="array.shape"></a>array.shape</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;shape :&#x27;</span>,array.shape)    <span class="comment"># 行数和列数</span></span><br><span class="line"><span class="comment"># shape : (2, 3)</span></span><br></pre></td></tr></table></figure>

<h3 id="array-size"><a href="#array-size" class="headerlink" title="array.size"></a>array.size</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;size:&#x27;</span>,array.size)   <span class="comment"># 元素个数</span></span><br><span class="line"><span class="comment"># size: 6</span></span><br></pre></td></tr></table></figure>



<h2 id="创建array"><a href="#创建array" class="headerlink" title="创建array"></a>创建array</h2><p><strong>关键字</strong></p>
<ul>
<li><code>array</code>：创建数组</li>
<li><code>dtype</code>：指定数据类型</li>
<li><code>zeros</code>：创建数据全为0</li>
<li><code>ones</code>：创建数据全为1</li>
<li><code>empty</code>：创建数据接近0</li>
<li><code>arrange</code>：按指定范围创建数据</li>
<li><code>linspace</code>：创建线段</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建数组</span></span><br><span class="line">a = np.array([<span class="number">2</span>,<span class="number">23</span>,<span class="number">4</span>])  <span class="comment"># list 1d</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [2 23 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定数据类型</span></span><br><span class="line">a = np.array([<span class="number">2</span>,<span class="number">23</span>,<span class="number">4</span>],dtype=np.<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">print</span>(a.dtype)</span><br><span class="line"><span class="comment"># int 64</span></span><br><span class="line">a = np.array([<span class="number">2</span>,<span class="number">23</span>,<span class="number">4</span>],dtype=np.int32)</span><br><span class="line"><span class="built_in">print</span>(a.dtype)</span><br><span class="line"><span class="comment"># int32</span></span><br><span class="line">a = np.array([<span class="number">2</span>,<span class="number">23</span>,<span class="number">4</span>],dtype=np.<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(a.dtype)</span><br><span class="line"><span class="comment"># float64</span></span><br><span class="line">a = np.array([<span class="number">2</span>,<span class="number">23</span>,<span class="number">4</span>],dtype=np.float32)</span><br><span class="line"><span class="built_in">print</span>(a.dtype)</span><br><span class="line"><span class="comment"># float32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建特定数据</span></span><br><span class="line">a = np.array([[<span class="number">2</span>,<span class="number">23</span>,<span class="number">4</span>],</span><br><span class="line">              [<span class="number">2</span>,<span class="number">32</span>,<span class="number">4</span>]])  <span class="comment"># 2d 矩阵 2行3列</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[ 2 23  4]</span></span><br><span class="line"><span class="string"> [ 2 32  4]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建全0数组</span></span><br><span class="line">a = np.zeros((<span class="number">3</span>,<span class="number">4</span>)) <span class="comment"># 数据全为0，3行4列</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[ 0.,  0.,  0.,  0.],</span></span><br><span class="line"><span class="string">       [ 0.,  0.,  0.,  0.],</span></span><br><span class="line"><span class="string">       [ 0.,  0.,  0.,  0.]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建全1数组</span></span><br><span class="line">a = np.ones((<span class="number">3</span>,<span class="number">4</span>),dtype = np.<span class="built_in">int</span>)   <span class="comment"># 数据为1，3行4列</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[1, 1, 1, 1],</span></span><br><span class="line"><span class="string">       [1, 1, 1, 1],</span></span><br><span class="line"><span class="string">       [1, 1, 1, 1]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建全空数组</span></span><br><span class="line">a = np.empty((<span class="number">3</span>,<span class="number">4</span>)) <span class="comment"># 数据为empty，3行4列</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[  0.00000000e+000,   4.94065646e-324,   9.88131292e-324,</span></span><br><span class="line"><span class="string">          1.48219694e-323],</span></span><br><span class="line"><span class="string">       [  1.97626258e-323,   2.47032823e-323,   2.96439388e-323,</span></span><br><span class="line"><span class="string">          3.45845952e-323],</span></span><br><span class="line"><span class="string">       [  3.95252517e-323,   4.44659081e-323,   4.94065646e-323,</span></span><br><span class="line"><span class="string">          5.43472210e-323]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用 arange 创建连续数组</span></span><br><span class="line">a = np.arange(<span class="number">10</span>,<span class="number">20</span>,<span class="number">2</span>) <span class="comment"># 10-19 的数据，2步长</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([10, 12, 14, 16, 18])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用 reshape 改变数据的形状</span></span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))    <span class="comment"># 3行4列，0到11</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[ 0,  1,  2,  3],</span></span><br><span class="line"><span class="string">       [ 4,  5,  6,  7],</span></span><br><span class="line"><span class="string">       [ 8,  9, 10, 11]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用 linspace 创建线段型数据</span></span><br><span class="line">a = np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">20</span>)    <span class="comment"># 开始端1，结束端10，且分割成20个数据，生成线段</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([  1.        ,   1.47368421,   1.94736842,   2.42105263,</span></span><br><span class="line"><span class="string">         2.89473684,   3.36842105,   3.84210526,   4.31578947,</span></span><br><span class="line"><span class="string">         4.78947368,   5.26315789,   5.73684211,   6.21052632,</span></span><br><span class="line"><span class="string">         6.68421053,   7.15789474,   7.63157895,   8.10526316,</span></span><br><span class="line"><span class="string">         8.57894737,   9.05263158,   9.52631579,  10.        ])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用reshape</span></span><br><span class="line">a = np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">20</span>).reshape((<span class="number">5</span>,<span class="number">4</span>)) <span class="comment"># 更改shape</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[  1.        ,   1.47368421,   1.94736842,   2.42105263],</span></span><br><span class="line"><span class="string">       [  2.89473684,   3.36842105,   3.84210526,   4.31578947],</span></span><br><span class="line"><span class="string">       [  4.78947368,   5.26315789,   5.73684211,   6.21052632],</span></span><br><span class="line"><span class="string">       [  6.68421053,   7.15789474,   7.63157895,   8.10526316],</span></span><br><span class="line"><span class="string">       [  8.57894737,   9.05263158,   9.52631579,  10.        ]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])   <span class="comment"># array([10, 20, 30, 40])</span></span><br><span class="line">b=np.arange(<span class="number">4</span>)              <span class="comment"># array([0, 1, 2, 3])</span></span><br><span class="line"></span><br><span class="line">c=a-b  <span class="comment"># array([10, 19, 28, 37])</span></span><br><span class="line">c=a+b   <span class="comment"># array([10, 21, 32, 43])</span></span><br><span class="line">c=a*b   <span class="comment"># array([  0,  20,  60, 120])</span></span><br><span class="line">c=b**<span class="number">2</span>  <span class="comment"># array([0, 1, 4, 9])</span></span><br><span class="line">c=<span class="number">10</span>*np.sin(a)  </span><br><span class="line"><span class="comment"># array([-5.44021111,  9.12945251, -9.88031624,  7.4511316 ])</span></span><br><span class="line"><span class="built_in">print</span>(b&lt;<span class="number">3</span>) <span class="comment"># array([ True,  True,  True, False], dtype=bool)</span></span><br></pre></td></tr></table></figure>

<h3 id="dot"><a href="#dot" class="headerlink" title="dot()"></a>dot()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#矩阵运算 矩阵点乘</span></span><br><span class="line">a=np.array([[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">b=np.arange(<span class="number">4</span>).reshape((<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># array([[1, 1],</span></span><br><span class="line"><span class="comment">#       [0, 1]])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># array([[0, 1],</span></span><br><span class="line"><span class="comment">#       [2, 3]])</span></span><br><span class="line"></span><br><span class="line">c_dot = np.dot(a,b)</span><br><span class="line"><span class="comment"># array([[2, 4],</span></span><br><span class="line"><span class="comment">#       [2, 3]])</span></span><br><span class="line">c_dot_2 = a.dot(b) <span class="comment">#另一种表达方式</span></span><br><span class="line"><span class="comment"># array([[2, 4],</span></span><br><span class="line"><span class="comment">#       [2, 3]])</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="sum-min-max"><a href="#sum-min-max" class="headerlink" title="sum()    min()    max()"></a>sum()    min()    max()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.random.random((<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># array([[ 0.94692159,  0.20821798,  0.35339414,  0.2805278 ],</span></span><br><span class="line"><span class="comment">#       [ 0.04836775,  0.04023552,  0.44091941,  0.21665268]])</span></span><br><span class="line"></span><br><span class="line">np.<span class="built_in">sum</span>(a)   <span class="comment"># 4.4043622002745959</span></span><br><span class="line">np.<span class="built_in">min</span>(a)   <span class="comment"># 0.23651223533671784</span></span><br><span class="line">np.<span class="built_in">max</span>(a)   <span class="comment"># 0.90438450240606416</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a =&quot;</span>,a)</span><br><span class="line"><span class="comment"># a = [[ 0.23651224  0.41900661  0.84869417  0.46456022]</span></span><br><span class="line"><span class="comment"># 	   [ 0.60771087  0.9043845   0.36603285  0.55746074]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sum =&quot;</span>,np.<span class="built_in">sum</span>(a,axis=<span class="number">1</span>)) <span class="comment">#当axis的值为1的时候，将会以行作为查找单元</span></span><br><span class="line"><span class="comment"># sum = [ 1.96877324  2.43558896]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;min =&quot;</span>,np.<span class="built_in">min</span>(a,axis=<span class="number">0</span>)) <span class="comment">#当axis的值为0的时候，将会以列作为查找单元</span></span><br><span class="line"><span class="comment"># min = [ 0.23651224  0.41900661  0.36603285  0.46456022]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;max =&quot;</span>,np.<span class="built_in">max</span>(a,axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># max = [ 0.84869417  0.9043845 ]</span></span><br></pre></td></tr></table></figure>

<h3 id="argmin-argmax"><a href="#argmin-argmax" class="headerlink" title="argmin()    argmax()"></a>argmin()    argmax()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">2</span>,<span class="number">14</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># array([[ 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">#        [ 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">#        [10,11,12,13]])</span></span><br><span class="line">         </span><br><span class="line"><span class="built_in">print</span>(np.argmin(A))    <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(np.argmax(A))    <span class="comment"># 11</span></span><br></pre></td></tr></table></figure>

<h3 id="average-mean"><a href="#average-mean" class="headerlink" title="average()    mean()"></a>average()    mean()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.mean(A))        <span class="comment"># 7.5</span></span><br><span class="line"><span class="built_in">print</span>(np.average(A))     <span class="comment"># 7.5</span></span><br><span class="line"><span class="built_in">print</span>(A.mean())          <span class="comment"># 7.5</span></span><br></pre></td></tr></table></figure>

<h3 id="median"><a href="#median" class="headerlink" title="median()"></a>median()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(A.median())       <span class="comment"># 7.5</span></span><br></pre></td></tr></table></figure>

<h3 id="cumsum-diff"><a href="#cumsum-diff" class="headerlink" title="cumsum()    diff()"></a>cumsum()    diff()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.cumsum(A)) </span><br><span class="line"><span class="comment"># [2 5 9 14 20 27 35 44 54 65 77 90]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.diff(A))    </span><br><span class="line"><span class="comment"># [[1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1]]</span></span><br></pre></td></tr></table></figure>

<h3 id="nonzero"><a href="#nonzero" class="headerlink" title="nonzero()"></a>nonzero()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.nonzero(A))  </span><br><span class="line"><span class="comment"># (array([0,0,0,0,1,1,1,1,2,2,2,2]),array([0,1,2,3,0,1,2,3,0,1,2,3]))</span></span><br></pre></td></tr></table></figure>

<h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">14</span>,<span class="number">2</span>, -<span class="number">1</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)) </span><br><span class="line"><span class="comment"># array([[14, 13, 12, 11],</span></span><br><span class="line"><span class="comment">#       [10,  9,  8,  7],</span></span><br><span class="line"><span class="comment">#       [ 6,  5,  4,  3]])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.sort(A))    </span><br><span class="line"><span class="comment"># array([[11,12,13,14]</span></span><br><span class="line"><span class="comment">#        [ 7, 8, 9,10]</span></span><br><span class="line"><span class="comment">#        [ 3, 4, 5, 6]])</span></span><br></pre></td></tr></table></figure>

<h3 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.transpose(A))    </span><br><span class="line"><span class="built_in">print</span>(A.T)</span><br><span class="line"></span><br><span class="line"><span class="comment"># array([[14,10, 6]</span></span><br><span class="line"><span class="comment">#        [13, 9, 5]</span></span><br><span class="line"><span class="comment">#        [12, 8, 4]</span></span><br><span class="line"><span class="comment">#        [11, 7, 3]])</span></span><br><span class="line"><span class="comment"># array([[14,10, 6]</span></span><br><span class="line"><span class="comment">#        [13, 9, 5]</span></span><br><span class="line"><span class="comment">#        [12, 8, 4]</span></span><br><span class="line"><span class="comment">#        [11, 7, 3]])</span></span><br></pre></td></tr></table></figure>

<h3 id="clip"><a href="#clip" class="headerlink" title="clip()"></a>clip()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#clip(Array,Array_min,Array_max)</span></span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># array([[14,13,12,11]</span></span><br><span class="line"><span class="comment">#        [10, 9, 8, 7]</span></span><br><span class="line"><span class="comment">#        [ 6, 5, 4, 3]])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.clip(A,<span class="number">5</span>,<span class="number">9</span>))    </span><br><span class="line"><span class="comment"># array([[ 9, 9, 9, 9]</span></span><br><span class="line"><span class="comment">#        [ 9, 9, 8, 7]</span></span><br><span class="line"><span class="comment">#        [ 6, 5, 5, 5]])</span></span><br></pre></td></tr></table></figure>



<h2 id="array索引"><a href="#array索引" class="headerlink" title="array索引"></a>array索引</h2><h3 id="一维索引"><a href="#一维索引" class="headerlink" title="一维索引"></a>一维索引</h3><p>一维矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">3</span>,<span class="number">15</span>)</span><br><span class="line"><span class="comment"># array([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])</span></span><br><span class="line"><span class="built_in">print</span>(A[<span class="number">3</span>])    <span class="comment"># 6</span></span><br></pre></td></tr></table></figure>

<p>二维矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = np.arange(<span class="number">3</span>,<span class="number">15</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[ 3,  4,  5,  6]</span></span><br><span class="line"><span class="string">       [ 7,  8,  9, 10]</span></span><br><span class="line"><span class="string">       [11, 12, 13, 14]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">         </span><br><span class="line"><span class="built_in">print</span>(A[<span class="number">2</span>])         </span><br><span class="line"><span class="comment"># [11 12 13 14]</span></span><br></pre></td></tr></table></figure>

<h3 id="二维索引"><a href="#二维索引" class="headerlink" title="二维索引"></a>二维索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(A[<span class="number">1</span>][<span class="number">1</span>])      <span class="comment"># 8</span></span><br><span class="line"><span class="built_in">print</span>(A[<span class="number">1</span>, <span class="number">1</span>])      <span class="comment"># 8</span></span><br><span class="line"><span class="built_in">print</span>(A[<span class="number">1</span>, <span class="number">1</span>:<span class="number">3</span>])    <span class="comment"># [8 9]</span></span><br></pre></td></tr></table></figure>

<p>逐行输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> A:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br><span class="line"><span class="string">&quot;&quot;&quot;    </span></span><br><span class="line"><span class="string">[ 3,  4,  5, 6]</span></span><br><span class="line"><span class="string">[ 7,  8,  9, 10]</span></span><br><span class="line"><span class="string">[11, 12, 13, 14]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>逐列输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> A.T:</span><br><span class="line">    <span class="built_in">print</span>(column)</span><br><span class="line"><span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">[ 3,  7,  11]</span></span><br><span class="line"><span class="string">[ 4,  8,  12]</span></span><br><span class="line"><span class="string">[ 5,  9,  13]</span></span><br><span class="line"><span class="string">[ 6, 10,  14]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>迭代输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">3</span>,<span class="number">15</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">         </span><br><span class="line"><span class="built_in">print</span>(A.flatten())   </span><br><span class="line"><span class="comment"># array([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> A.flat:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line">……</span><br><span class="line"><span class="comment"># 14</span></span><br></pre></td></tr></table></figure>



<h2 id="array合并"><a href="#array合并" class="headerlink" title="array合并"></a>array合并</h2><h3 id="np-vstack"><a href="#np-vstack" class="headerlink" title="np.vstack()"></a>np.vstack()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">B = np.array([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">         </span><br><span class="line"><span class="built_in">print</span>(np.vstack((A,B)))    <span class="comment"># vertical stack</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[1,1,1]</span></span><br><span class="line"><span class="string"> [2,2,2]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">C = np.vstack((A,B))      </span><br><span class="line"><span class="built_in">print</span>(A.shape,C.shape)</span><br><span class="line"><span class="comment"># (3,) (2,3)</span></span><br></pre></td></tr></table></figure>

<h3 id="np-hstack"><a href="#np-hstack" class="headerlink" title="np.hstack()"></a>np.hstack()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D = np.hstack((A,B))       <span class="comment"># horizontal stack</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(D)</span><br><span class="line"><span class="comment"># [1,1,1,2,2,2]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A.shape,D.shape)</span><br><span class="line"><span class="comment"># (3,) (6,)</span></span><br></pre></td></tr></table></figure>

<h3 id="np-newaxis"><a href="#np-newaxis" class="headerlink" title="np.newaxis()"></a>np.newaxis()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(A[np.newaxis,:])</span><br><span class="line"><span class="comment"># [[1 1 1]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A[np.newaxis,:].shape)</span><br><span class="line"><span class="comment"># (1,3)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A[:,np.newaxis])</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[1]</span></span><br><span class="line"><span class="string"> [1]</span></span><br><span class="line"><span class="string"> [1]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A[:,np.newaxis].shape)</span><br><span class="line"><span class="comment"># (3,1)</span></span><br></pre></td></tr></table></figure>

<p>综合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])[:,np.newaxis]</span><br><span class="line">B = np.array([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])[:,np.newaxis]</span><br><span class="line">         </span><br><span class="line">C = np.vstack((A,B))   <span class="comment"># vertical stack</span></span><br><span class="line">D = np.hstack((A,B))   <span class="comment"># horizontal stack</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(D)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string">[1 2]</span></span><br><span class="line"><span class="string">[1 2]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A.shape,D.shape)</span><br><span class="line"><span class="comment"># (3,1) (3,2)</span></span><br></pre></td></tr></table></figure>

<h3 id="np-concatenate"><a href="#np-concatenate" class="headerlink" title="np.concatenate()"></a>np.concatenate()</h3><p>当合并操作需要针对多个矩阵或序列时，借助<code>concatenate</code>函数可能使用起来比前述的函数更加方便，<code>axis</code>参数很好的控制了矩阵的纵向或是横向打印，相比较<code>vstack</code>和<code>hstack</code>函数显得更加方便。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C = np.concatenate((A,B,B,A),axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[1],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [1]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">D = np.concatenate((A,B,B,A),axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(D)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[1, 2, 2, 1],</span></span><br><span class="line"><span class="string">       [1, 2, 2, 1],</span></span><br><span class="line"><span class="string">       [1, 2, 2, 1]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="array分割"><a href="#array分割" class="headerlink" title="array分割"></a>array分割</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[ 0,  1,  2,  3],</span></span><br><span class="line"><span class="string">       [ 4,  5,  6,  7],</span></span><br><span class="line"><span class="string">       [ 8,  9, 10, 11]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="纵向分割"><a href="#纵向分割" class="headerlink" title="纵向分割"></a>纵向分割</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.split(A, <span class="number">2</span>, axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[array([[0, 1],</span></span><br><span class="line"><span class="string">        [4, 5],</span></span><br><span class="line"><span class="string">        [8, 9]]), </span></span><br><span class="line"><span class="string"> array([[ 2,  3],</span></span><br><span class="line"><span class="string">        [ 6,  7],</span></span><br><span class="line"><span class="string">        [10, 11]])]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="横向分割"><a href="#横向分割" class="headerlink" title="横向分割"></a>横向分割</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.split(A, <span class="number">3</span>, axis=<span class="number">0</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[array([[0, 1, 2, 3]]), </span></span><br><span class="line"><span class="string"> array([[4, 5, 6, 7]]),</span></span><br><span class="line"><span class="string"> array([[8, 9, 10, 11]])]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="不等量的分割"><a href="#不等量的分割" class="headerlink" title="不等量的分割"></a>不等量的分割</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.array_split(A, <span class="number">3</span>, axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[array([[0, 1],</span></span><br><span class="line"><span class="string">        [4, 5],</span></span><br><span class="line"><span class="string">        [8, 9]]), </span></span><br><span class="line"><span class="string"> array([[ 2],</span></span><br><span class="line"><span class="string">        [ 6],</span></span><br><span class="line"><span class="string">        [10]]), </span></span><br><span class="line"><span class="string"> array([[ 3],</span></span><br><span class="line"><span class="string">        [ 7],</span></span><br><span class="line"><span class="string">        [11]])]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="vsplit-hsplit"><a href="#vsplit-hsplit" class="headerlink" title="vsplit()    hsplit()"></a>vsplit()    hsplit()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.vsplit(A, <span class="number">3</span>)) <span class="comment">#等于 print(np.split(A, 3, axis=0)) 横向切一刀</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.hsplit(A, <span class="number">2</span>)) <span class="comment">#等于 print(np.split(A, 2, axis=1)) 纵向来一刀</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[array([[0, 1],</span></span><br><span class="line"><span class="string">        [4, 5],</span></span><br><span class="line"><span class="string">        [8, 9]]), </span></span><br><span class="line"><span class="string"> array([[2, 3],</span></span><br><span class="line"><span class="string">        [6, 7],</span></span><br><span class="line"><span class="string">        [10, 11]])]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="array复制"><a href="#array复制" class="headerlink" title="array复制"></a>array复制</h2><h3 id="“-”-赋值"><a href="#“-”-赋值" class="headerlink" title="“=” 赋值"></a>“=” 赋值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># array([0, 1, 2, 3])</span></span><br><span class="line"></span><br><span class="line">b = a</span><br><span class="line">c = a</span><br><span class="line">d = b</span><br><span class="line"></span><br><span class="line"><span class="comment">#改变a的第一个值，b、c、d的第一个值也会同时改变</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">11</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># array([11,  1,  2,  3])</span></span><br><span class="line">b <span class="keyword">is</span> a  <span class="comment"># True</span></span><br><span class="line">c <span class="keyword">is</span> a  <span class="comment"># True</span></span><br><span class="line">d <span class="keyword">is</span> a  <span class="comment"># True</span></span><br><span class="line">d[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">22</span>, <span class="number">33</span>]   <span class="comment"># array([11, 22, 33,  3])</span></span><br><span class="line"><span class="built_in">print</span>(a)            <span class="comment"># array([11, 22, 33,  3])</span></span><br><span class="line"><span class="built_in">print</span>(b)            <span class="comment"># array([11, 22, 33,  3])</span></span><br><span class="line"><span class="built_in">print</span>(c)            <span class="comment"># array([11, 22, 33,  3])</span></span><br></pre></td></tr></table></figure>

<h3 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = a.copy()    <span class="comment"># deep copy</span></span><br><span class="line"><span class="built_in">print</span>(b)        <span class="comment"># array([11, 22, 33,  3])</span></span><br><span class="line">a[<span class="number">3</span>] = <span class="number">44</span></span><br><span class="line"><span class="built_in">print</span>(a)        <span class="comment"># array([11, 22, 33, 44])</span></span><br><span class="line"><span class="built_in">print</span>(b)        <span class="comment"># array([11, 22, 33,  3])</span></span><br></pre></td></tr></table></figure>



<h2 id="实际运用补充"><a href="#实际运用补充" class="headerlink" title="实际运用补充"></a>实际运用补充</h2><h3 id="np-around-四舍五入"><a href="#np-around-四舍五入" class="headerlink" title="np.around 四舍五入"></a>np.around 四舍五入</h3><p>返回四舍五入后的值，可指定精度</p>
<p>around(a, decimals=0, out=None)</p>
<p>a     输入数组<br>decimals     要舍入的小数位数。 默认值为0。 如果为负，整数将四舍五入到小数点左侧的位置</p>
<h3 id="np-floor-向下取整"><a href="#np-floor-向下取整" class="headerlink" title="np.floor 向下取整"></a>np.floor 向下取整</h3><p>np.floor 返回不大于输入参数的最大整数</p>
<h3 id="np-ceil-向上取整"><a href="#np-ceil-向上取整" class="headerlink" title="np.ceil 向上取整"></a>np.ceil 向上取整</h3><p>np.ceil 函数返回输入值的上限</p>
<h3 id="np-where-条件选取"><a href="#np-where-条件选取" class="headerlink" title="np.where 条件选取"></a>np.where 条件选取</h3><p>numpy.where(condition[, x, y])</p>
<p>根据条件 condition 从 x 和 y 中选择元素，当 condition 为 True 时，选 x，否则选 y</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV</title>
    <url>/2020/03/24/OpenCV/</url>
    <content><![CDATA[<h3 id="cv2-imread"><a href="#cv2-imread" class="headerlink" title="cv2.imread()"></a>cv2.imread()</h3><p><code>cv2.imread(filename[, flags]) </code></p>
<p>第二个参数是要告诉函数应该如何读取这幅图片。</p>
<p>• <code>cv2.IMREAD_COLOR</code>：读入一副彩色图像。图像的透明度会被忽略，这是默认参数。</p>
<p>• <code>cv2.IMREAD_GRAYSCALE</code>：以灰度模式读入图像</p>
<p>返回（高度，宽度，通道数）的np数组，可通过.shape查看</p>
<span id="more"></span>



<h3 id="cv2-resize"><a href="#cv2-resize" class="headerlink" title="cv2.resize()"></a>cv2.resize()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.resize(src, dsize[, dst[, fx[, fy[, interpolation]]]])</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>src</td>
<td>【必需】原图像</td>
</tr>
<tr>
<td>dsize</td>
<td>【必需】输出图像所需大小</td>
</tr>
<tr>
<td>fx</td>
<td>【可选】沿水平轴的比例因子</td>
</tr>
<tr>
<td>fy</td>
<td>【可选】沿垂直轴的比例因子</td>
</tr>
<tr>
<td>interpolation</td>
<td>【可选】插值方式</td>
</tr>
</tbody></table>
<p>其中插值方式有很多种：</p>
<table>
<thead>
<tr>
<th>cv.INTER_NEAREST</th>
<th>最近邻插值</th>
</tr>
</thead>
<tbody><tr>
<td>cv.INTER_LINEAR</td>
<td>双线性插值</td>
</tr>
<tr>
<td>cv.INTER_CUBIC</td>
<td>双线性插值</td>
</tr>
<tr>
<td>cv.INTER_AREA</td>
<td>使用像素区域关系重新采样。它可能是图像抽取的首选方法，因为它可以提供无莫尔条纹的结果。但是当图像被缩放时，它类似于INTER_NEAREST方法。</td>
</tr>
</tbody></table>
<p>通常的，缩小使用cv.INTER_AREA，放缩使用cv.INTER_CUBIC(较慢)和cv.INTER_LINEAR(较快效果也不错)。<br>默认情况下，所有的放缩都使用cv.INTER_LINEAR。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH 互信机制</title>
    <url>/2021/04/21/SSH%E4%BA%92%E4%BF%A1%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="SSH-互信机制"><a href="#SSH-互信机制" class="headerlink" title="SSH 互信机制"></a>SSH 互信机制</h1><ol>
<li><p>客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span></span><br><span class="line">$ ssh-keygen -t rsa</span><br><span class="line">$ <span class="built_in">cd</span> .ssh/</span><br><span class="line">$ ls</span><br><span class="line"><span class="comment">## id_rsa  id_rsa.pub</span></span><br></pre></td></tr></table></figure></li>
<li><p>服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .ssh/</span><br><span class="line">$ vim authorized_keys</span><br><span class="line"><span class="comment">## 粘贴客户端的id_rsa.pub内容</span></span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="1、中间人攻击"><a href="#1、中间人攻击" class="headerlink" title="1、中间人攻击"></a>1、中间人攻击</h3><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。</p>
<p>过程：</p>
<ol>
<li>远程主机收到用户的登录请求，把自己的公钥发给用户。</li>
<li>用户使用这个公钥，将登录密码加密后，发送回来。</li>
<li>远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</li>
</ol>
<p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。</p>
<h3 id="2、口令登陆"><a href="#2、口令登陆" class="headerlink" title="2、口令登陆"></a>2、口令登陆</h3><p>如果第一次登陆服务器，系统会出现如下提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The authenticity of host <span class="string">&#x27;host (12.18.429.21)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br><span class="line"><span class="string">## 无法确认host主机的真实性，只知道它的公钥指纹，还想继续连接吗？</span></span><br></pre></td></tr></table></figure>

<p>所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d，再进行比较，就容易多了。</p>
<p>很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</p>
<p>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。系统会出现一句提示，表示host主机已经得到认可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Warning: Permanently added <span class="string">&#x27;host,12.18.429.21&#x27;</span> (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure>

<p>然后，会要求输入密码。如果密码正确，就可以登录了。</p>
<p>当远程主机的公钥被接受以后，它就会被保存在文件 <code>$HOME/.ssh/known_hosts</code> 之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p>
<p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是 <code>/etc/ssh/ssh_known_hosts</code>，保存一些对所有用户都可信赖的远程主机的公钥。</p>
<h3 id="3、公钥登陆"><a href="#3、公钥登陆" class="headerlink" title="3、公钥登陆"></a>3、公钥登陆</h3><p>SSH还提供了公钥登录，可以省去输入密码的步骤。</p>
<p>所谓”公钥登录”，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p>
<p>这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure>

<p>运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。</p>
<p>运行结束以后，在 <code>$HOME/.ssh/</code> 目录下，会新生成两个文件： <code>id_rsa.pub</code>和 <code>id_rsa</code>。</p>
<p>前者是公钥，后者是私钥。</p>
<p>这时再输入下面的命令，将公钥传送到远程主机host上面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-copy-id user@host</span><br></pre></td></tr></table></figure>

<p>从此再登录，就不需要输入密码了。</p>
<p>如果还是不行，就打开远程主机的/etc/ssh/sshd_config这个文件，检查下面几行前面”#”注释是否取掉。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>然后，重启远程主机的ssh服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// ubuntu系统</span><br><span class="line">service ssh restart</span><br><span class="line">　　</span><br><span class="line">// debian系统</span><br><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure>

<h3 id="4、authorized-keys文件"><a href="#4、authorized-keys文件" class="headerlink" title="4、authorized_keys文件"></a>4、authorized_keys文件</h3><p>远程主机将用户的公钥，保存在登录后的用户主目录的 <code>$HOME/.ssh/authorized_keys</code>文件中。公钥就是一段字符串，只要把它追加在 <code>authorized_keys</code>文件的末尾就行了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh user@host <span class="string">&#x27;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#x27;</span> &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>这条命令由多个语句组成，依次分解开来看：</p>
<p>（1） <code>$ ssh user@host</code>，表示登录远程主机；</p>
<p>（2）单引号中的 <code>mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys</code>，表示登录后在远程shell上执行的命令；</p>
<p>（3） <code>$ mkdir -p .ssh</code> 的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；</p>
<p>（4） <code>cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</code>的作用是，将本地的公钥文件 <code>~/.ssh/id_rsa.pub</code>，重定向追加到远程文件 <code>authorized_keys</code>的末尾。</p>
<p>写入 <code>authorized_keys</code>文件后，公钥登录的设置就完成了。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>远程连接</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH 端口转发</title>
    <url>/2021/04/20/SSH%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<h1 id="SSH-端口转发"><a href="#SSH-端口转发" class="headerlink" title="SSH 端口转发"></a>SSH 端口转发</h1><h2 id="一、基本连接"><a href="#一、基本连接" class="headerlink" title="一、基本连接"></a>一、基本连接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh username@hostname</span><br></pre></td></tr></table></figure>

<ol>
<li>执行命令、运行 SSH 客户端的主机，称为本地主机 Host A</li>
<li>接收连接请求、运行 SSH 服务器的主机，称为远程主机 Host B</li>
</ol>
<p><code>username</code>是主机 B 上已登录的用户名， <code>hostname</code> 则是主机 B 的设备名、域名或 IP 等可以在网络（局域网或互联网）上定位的名称。</p>
<span id="more"></span>

<h2 id="二、本地端口转发"><a href="#二、本地端口转发" class="headerlink" title="二、本地端口转发"></a>二、本地端口转发</h2><p>本地端口转发是将应用【application client】对于本地主机 A 指定端口 X 的访问请求转发给主机 B，交由主机 B 对另一指定主机 C 的指定端口 Z 发起访问。命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -L 主机A**端口X**:**主机C**:主机C**端口Z** username@hostname</span><br><span class="line"><span class="comment"># 简单理解为：将对A:X的访问转变成对C:Z的访问</span></span><br></pre></td></tr></table></figure>

<ul>
<li>客户端在执行端口转发命令的同时，实际上也执行了基本的连接命令。</li>
<li><code>-L</code>  表示使用「本地端口转发」选项，之后是用冒号分隔开的三个需要指定的项。</li>
<li>原理上，主机C可以是任何能够被主机B识别到的设备，也可以是主机B自身。</li>
</ul>
<p>当主机C在其某端口提供某服务【application server】，主机A需要使用该服务却无法直接访问主机 C 或该端口时，如果发现有 SSH：A→B 的连接，且主机B能够直接访问主机C的该端口，本地端口转发就派上用场。</p>
<p><img src="https://i.loli.net/2021/05/16/uyIt1MnveJX3RSr.png" alt="SSH%20%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%20f634a3d5d7854a5eb11df6c10df00b8c/Untitled.png"></p>
<h2 id="三、远程端口转发"><a href="#三、远程端口转发" class="headerlink" title="三、远程端口转发"></a>三、远程端口转发</h2><p>当主机 C 在其某端口提供某服务，主机B需要使用该服务却无法直接访问主机 C 或该端口时，如果发现有 SSH：A→B 的连接，且主机A能够直接访问主机 C 的该端口，远程端口转发就派上用场。</p>
<p><img src="https://i.loli.net/2021/05/16/8ZuJz2Ca9oNpxBS.png" alt="SSH%20%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%20f634a3d5d7854a5eb11df6c10df00b8c/Untitled%201.png"></p>
<p>此时访问请求在主机 B 一侧发生，而 SSH 连接的方向却没有变化，仍是由 A 到 B 的。</p>
<p>与本地端口转发的流动方向相反，远程端口转发是将对于远程主机 B 指定端口 Y 的访问请求转发给主机 A ，交由主机 A 对另一指定主机 C 的指定端口 Z 发起访问。命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -R 主机B**端口Y**:**主机C**:**主机C端口Z** username@hostname</span><br><span class="line"><span class="comment"># 简单理解为：将对B:Y的访问转变成对C:Z的访问</span></span><br></pre></td></tr></table></figure>

<ul>
<li>username@hostname不变，因为我们仍然以从主机 A 对主机 B 发起 SSH 连接为基础；</li>
<li><code>-R</code> 旗标表示使用「远程端口转发」选项，之后是用冒号分隔开的三个需要指定的项。</li>
<li>原理上，主机 C 可以是任何能够被主机 A 识别到的设备，也可以是主机 A 自身。</li>
</ul>
<h2 id="四、动态端口转发"><a href="#四、动态端口转发" class="headerlink" title="四、动态端口转发"></a>四、动态端口转发</h2><p>动态端口转发可以把本地主机 A 上运行的 SSH 客户端转变成一个 SOCKS 代理服务器；</p>
<p>实际上它是一种特殊的本地端口转发，或者说叫它「动态本地端口转发」更科学。</p>
<p>这个动态，就动在这种转发不规定目标地址（主机C）和目标端口（端口Z），而是去读取应用发起的请求，从请求中获取目标信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -D 主机A端口X username@hostname</span><br></pre></td></tr></table></figure>

<h2 id="五、端口转发的停止"><a href="#五、端口转发的停止" class="headerlink" title="五、端口转发的停止"></a>五、端口转发的停止</h2><p>SSH端口转发完全基于基本的SSH连接，因此，通过在远程终端上执行exit命令、暴力关闭本地终端窗口、远程主机B关机、本地主机A关机等可以切断SSH连接的方式，即可停止SSH端口转发。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>远程连接</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 配置</title>
    <url>/2021/01/18/Vim%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Vim-配置"><a href="#Vim-配置" class="headerlink" title="Vim 配置"></a>Vim 配置</h1><p>Vim编辑器相关的所有功能开关都可以通过 <strong><code>.vimrc</code></strong> 文件进行设置。 </p>
<p>**<code>.vimrc</code>**配置文件分系统配置和用户配置两种。</p>
<ul>
<li>系统vimrc配置文件存放在Vim的安装目录，默认路径为<code>/usr/share/vim/.vimrc</code>。可以使用命令<code>echo $VIM</code>来确定Vim的安装目录。</li>
<li>用户vimrc文件，存放在用户主目录下<code>~/.vimrc</code>。可以使用命令<code>echo $HOME</code>确定用户主目录。</li>
</ul>
<p><em>注意</em>：用户配置文件优先于系统配置文件，Vim启动时会优先读取当前用户根目录下的**.vimrc**文件。所以与个人用户相关的个性化配置一般都放在<code>~/.vimrc</code>中。</p>
<span id="more"></span>

<h2 id="使更改生效"><a href="#使更改生效" class="headerlink" title="使更改生效"></a>使更改生效</h2><p>要让.vimrc变更内容生效，一般的做法是先保存 .vimrc 再重启vim，增加如下设置，可以实现保存 .vimrc 时自动重启加载。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;让vimrc配置变更立即生效&#x27;</span></span><br><span class="line">autocmd BufWritePost <span class="variable">$MYVIMRC</span> <span class="built_in">source</span> <span class="variable">$MYVIMRC</span></span><br></pre></td></tr></table></figure>

<h2 id="一、基础设置"><a href="#一、基础设置" class="headerlink" title="一、基础设置"></a>一、基础设置</h2><h3 id="1、设置中文不乱码"><a href="#1、设置中文不乱码" class="headerlink" title="1、设置中文不乱码"></a>1、设置中文不乱码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;设置编码&#x27;</span></span><br><span class="line"><span class="built_in">set</span> fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936</span><br><span class="line"><span class="built_in">set</span> termencoding=utf-8</span><br><span class="line"><span class="built_in">set</span> encoding=utf-8</span><br></pre></td></tr></table></figure>

<h3 id="2、显示行号"><a href="#2、显示行号" class="headerlink" title="2、显示行号"></a>2、显示行号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;显示行号&#x27;</span></span><br><span class="line"><span class="built_in">set</span> nu</span><br><span class="line"><span class="built_in">set</span> number</span><br></pre></td></tr></table></figure>

<h3 id="3、突出显示当前行"><a href="#3、突出显示当前行" class="headerlink" title="3、突出显示当前行"></a>3、突出显示当前行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> cursorline</span><br><span class="line"><span class="built_in">set</span> cul          <span class="string">&#x27;cursorline的缩写形式&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、启用鼠标"><a href="#4、启用鼠标" class="headerlink" title="4、启用鼠标"></a>4、启用鼠标</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> mouse=a</span><br><span class="line"><span class="built_in">set</span> selection=exclusive</span><br><span class="line"><span class="built_in">set</span> selectmode=mouse,key</span><br></pre></td></tr></table></figure>

<p>Vim编辑器里默认是不启用鼠标的，也就是说不管你鼠标点击哪个位置，光标都不会移动。通过以上设置就可以启动鼠标。</p>
<h3 id="5、设置缩进"><a href="#5、设置缩进" class="headerlink" title="5、设置缩进"></a>5、设置缩进</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;设置Tab长度为4空格&#x27;</span></span><br><span class="line"><span class="built_in">set</span> tabstop=4</span><br><span class="line"><span class="string">&#x27;设置自动缩进长度为4空格&#x27;</span></span><br><span class="line"><span class="built_in">set</span> shiftwidth=4</span><br><span class="line"><span class="string">&#x27;继承前一行的缩进方式，适用于多行注释&#x27;</span></span><br><span class="line"><span class="built_in">set</span> autoindent</span><br></pre></td></tr></table></figure>

<h2 id="二、主题配置"><a href="#二、主题配置" class="headerlink" title="二、主题配置"></a>二、主题配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir ~/.vim</span><br><span class="line">git <span class="built_in">clone</span> https://gitclone.com/github.com/flazz/vim-colorschemes.git ~/.vim</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .vimrc</span></span><br><span class="line">colorscheme janah</span><br></pre></td></tr></table></figure>

<h2 id="三、整体配置"><a href="#三、整体配置" class="headerlink" title="三、整体配置"></a>三、整体配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936</span><br><span class="line"><span class="built_in">set</span> termencoding=utf-8</span><br><span class="line"><span class="built_in">set</span> encoding=utf-8</span><br><span class="line"><span class="built_in">set</span> nu</span><br><span class="line"><span class="built_in">set</span> number</span><br><span class="line"><span class="built_in">set</span> mouse=a</span><br><span class="line"><span class="built_in">set</span> selection=exclusive</span><br><span class="line"><span class="built_in">set</span> selectmode=mouse,key</span><br><span class="line"><span class="built_in">set</span> tabstop=4</span><br><span class="line"><span class="built_in">set</span> shiftwidth=4</span><br><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"></span><br><span class="line">colorscheme janah</span><br></pre></td></tr></table></figure>

<h2 id="四、推荐配置"><a href="#四、推荐配置" class="headerlink" title="四、推荐配置"></a>四、推荐配置</h2><p>配置可以直接使用网友共享的优化配置：</p>
<p><a href="https://github.com/amix/vimrc">https://github.com/amix/vimrc</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitclone.com/github.com/amix/vimrc.git ~/.vim_runtime</span><br><span class="line">sh ~/.vim_runtime/install_awesome_vimrc.sh</span><br></pre></td></tr></table></figure>

<p>Vim Plugins - NERDTree</p>
<p>Vim插件，装了这个插件，便可以显示树形目录结构。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitclone.com/github.com/scrooloose/nerdtree.git ~/.vim/bundle/nerdtree</span><br></pre></td></tr></table></figure>

<p>重启Vim，在命令模式下输入NERDTree即可开启目录展示，默认是当前路径。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:NERDTree</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Sklearn</title>
    <url>/2020/03/03/Sklearn/</url>
    <content><![CDATA[<h2 id="confusion-matrix"><a href="#confusion-matrix" class="headerlink" title="confusion_matrix"></a>confusion_matrix</h2><ol>
<li><p>概念</p>
<p>混淆矩阵是机器学习中总结分类模型预测结果的情形分析表，以矩阵形式将数据集中的记录按照真实的类别与分类模型作出的分类判断两个标准进行汇总。</p>
<img src="https://img-blog.csdn.net/20170814211735042?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbTBfMzgwNjE5Mjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" style="zoom:50%;" />

<p>灰色部分是与真实分类与预测分类结果相同，蓝色是分类错误的。</p>
</li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>confusion_matrix函数的使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sklearn.metrics.confusion_matrix(y_true, y_pred, labels=<span class="literal">None</span>, sample_weight=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>性质</th>
</tr>
</thead>
<tbody><tr>
<td>y_true</td>
<td>样本真实分类结果</td>
</tr>
<tr>
<td>y_pred</td>
<td>样本预测分类结果</td>
</tr>
<tr>
<td>labels</td>
<td>是所给出的类别，通过这个可对类别进行选择</td>
</tr>
<tr>
<td>sample_weight</td>
<td>样本权重</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="classification-report"><a href="#classification-report" class="headerlink" title="classification_report"></a>classification_report</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sklearn.metrics.classification_report(y_true, y_pred, labels=<span class="literal">None</span>, target_names=<span class="literal">None</span>, sample_weight=<span class="literal">None</span>, digits=<span class="number">2</span>, output_dict=<span class="literal">False</span>, zero_division=<span class="string">&#x27;warn&#x27;</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>性质</th>
</tr>
</thead>
<tbody><tr>
<td>y_true</td>
<td>1维数组，或标签指示器数组/稀疏矩阵，目标值。</td>
</tr>
<tr>
<td>y_pred</td>
<td>1维数组，或标签指示器数组/稀疏矩阵，分类器返回的估计值。</td>
</tr>
<tr>
<td>labels</td>
<td>array，shape = [n_labels]，报表中包含的标签索引的可选列表。</td>
</tr>
<tr>
<td>target_names</td>
<td>字符串列表，与标签匹配的可选显示名称（相同顺序）。</td>
</tr>
<tr>
<td>sample_weight</td>
<td>类似于shape = [n_samples]的数组，可选项，样本权重。</td>
</tr>
<tr>
<td>digits</td>
<td>输出浮点值的位数。</td>
</tr>
</tbody></table>
<p><strong>用法示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line">y_true = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">y_pred = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">target_names = [<span class="string">&#x27;class 0&#x27;</span>, <span class="string">&#x27;class 1&#x27;</span>, <span class="string">&#x27;class 2&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(classification_report(y_true, y_pred, target_names=target_names))</span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">            precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">    class 0       0.50      1.00      0.67         1</span><br><span class="line">    class 1       0.00      0.00      0.00         1</span><br><span class="line">    class 2       1.00      0.67      0.80         3</span><br><span class="line"></span><br><span class="line">avg / total       0.70      0.60      0.61         5</span><br></pre></td></tr></table></figure>

<p>其中列表左边的一列为分类的标签名，右边support列为每个标签的出现次数，avg / total行为各列的均值．</p>
<p><strong>参数说明</strong></p>
<ol>
<li><p><strong>Precision</strong></p>
<p><strong>精确率</strong>是针对我们<strong>预测结果</strong>而言的，它表示的是预测为正的样本中<strong>有多少是真正的正样本</strong>。那么预测为正就有两种可能了，一种就是把正类预测为正类(TP)，另一种就是把负类预测为正类(FP)，也就是</p>
<p><img src="https://www.zhihu.com/equation?tex=P++=+%5Cfrac%7BTP%7D%7BTP+FP%7D" alt="[公式]"></p>
<p>precision 体现了模型对负样本的区分能力，precision越高，说明模型<strong>对负样本的区分能力</strong>越强。</p>
</li>
<li><p><strong>Recall</strong></p>
<p><strong>召回率</strong>是针对我们原来的<strong>样本</strong>而言的，它表示的是样本中的<strong>正例有多少被预测正确了</strong>。那也有两种可能，一种是把原来的正类预测成正类(TP)，另一种就是把原来的正类预测为负类(FN)。</p>
<pre><code>                                                                        ![[公式]](https://www.zhihu.com/equation?tex=R+%3D+%5Cfrac%7BTP%7D%7BTP%2BFN%7D)
</code></pre>
<p>recall 体现了分类模型对正样本的识别能力，recall 越高，说明模型<strong>对正样本的识别能力</strong>越强。</p>
<img src="https://pic1.zhimg.com/80/d701da76199148837cfed83901cea99e_720w.jpg" alt="img" style="zoom: 67%;" /></li>
<li><p><strong>F1-Score</strong></p>
<img src="C:\Users\Fan\AppData\Roaming\Typora\typora-user-images\image-20200314182952150.png" alt="image-20200314182952150" style="zoom:67%;" />

<p>​        F1-score是对正负样本区分能力的综合，F1-score 越高，说明分类模型越稳健。</p>
<blockquote>
<p>比如我们常见的雷达预警系统，我们需要对雷达信号进行分析，判断这个信号是飞行器（正样本）还是噪声 （负样本）, 很显然，我们希望系统既能准确的捕捉到飞行器信号，也可以有效地区分噪声信号。所以就要同时权衡recall 和 precision这两个指标，如果我们把所有信号都判断为飞行器，那 recall 可以达到1，但是precision将会变得很低（假设两种信号的样本数接近），可能就在 0.5 左右，那F1-score 也不会很高。</p>
</blockquote>
<p>​    有的时候，我们对recall 与 precision 赋予不同的权重，表示对分类模型的偏好：</p>
<p><img src="C:\Users\Fan\AppData\Roaming\Typora\typora-user-images\image-20200314183641514.png" alt="image-20200314183641514"></p>
<blockquote>
<p>可以看到，当 β=1，那么Fβ就退回到F1了，β 其实反映了模型分类能力的偏好，β&gt;1的时候，precision的权重更大，为了提高Fβ，我们希望precision 越小，而recall 应该越大，说明模型更偏好于提升recall，意味着模型更看重对正样本的识别能力； 而 β&lt;1的时候，recall 的权重更大，因此，我们希望recall越小，而precision越大，模型更偏好于提升precision，意味着模型更看重对负样本的区分能力。</p>
</blockquote>
<p>​        recall越大，越不能放弃飞行器的识别，要识别所有的（宁愿把噪声识别出来），此时precision就低了。</p>
<p>​        precision越大，说明不要把噪声识别成了飞行器。只要识别是飞行器，那么就是飞行器。</p>
</li>
<li><p><strong>Accuracy</strong></p>
<p>预测对的 / 所有 </p>
</li>
</ol>
<blockquote>
<p><em>假如某个班级有男生</em> <strong>80</strong> <em>人, 女生**</em>20**<em>人, 共计</em> <strong>100</strong> <em>人. 目标是找出所有女生. 现在某人挑选出</em> <strong>50</strong> <em>个人, 其中</em> <strong>20</strong> <em>人是女生, 另外还错误的把 30 个男生也当作女生挑选出来了. 作为评估者的你需要来评估(<em><strong>evaluation</strong></em>)下他的工作</em></p>
</blockquote>
<p>​        accuracy 需要得到的是此君<strong>分正确的人</strong>占<strong>总人数</strong>的比例</p>
<p>​        我们可以得到:他把其中70(20女+50男)人判定正确了, 而总人数是100人，所以它的 accuracy 就是70 %(70 / 100).</p>
<h2 id="preprocessing-MinMaxScaler"><a href="#preprocessing-MinMaxScaler" class="headerlink" title="preprocessing.MinMaxScaler"></a>preprocessing.MinMaxScaler</h2><p><em>class</em> <code>sklearn.preprocessing.``MinMaxScaler</code>(<em>feature_range=(0</em>, <em>1)</em>, <em>copy=True</em>)</p>
<table>
<thead>
<tr>
<th>Parameters</th>
<th>Introduction</th>
</tr>
</thead>
<tbody><tr>
<td><strong>feature_range</strong>: tuple (min, max), default=(0, 1)</td>
<td>Desired range of transformed data.</td>
</tr>
<tr>
<td><strong>copy</strong>: bool, default = True</td>
<td>Set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array).</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Attributes</th>
<th>Introduction</th>
</tr>
</thead>
<tbody><tr>
<td><strong>min_</strong></td>
<td>Per feature adjustment for minimum. Equivalent to <code>min - X.min(axis=0) * self.scale_</code></td>
</tr>
<tr>
<td><strong>scale_</strong></td>
<td>Per feature relative scaling of the data. Equivalent to <code>(max - min) / (X.max(axis=0) - X.min(axis=0))</code></td>
</tr>
<tr>
<td><strong>data_min_</strong></td>
<td>Per feature minimum seen in the data</td>
</tr>
<tr>
<td><strong>data_max_</strong></td>
<td>Per feature maximum seen in the data</td>
</tr>
<tr>
<td><strong>data_range_</strong></td>
<td>Per feature range <code>(data_max_ - data_min_)</code> seen in the data</td>
</tr>
<tr>
<td><strong>n_samples_seen_</strong></td>
<td>The number of samples processed by the estimator. It will be reset on new calls to fit, but increments across <code>partial_fit</code> calls.</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Methods</th>
<th>Introduction</th>
</tr>
</thead>
<tbody><tr>
<td><code>fit</code>(<em>self</em>, <em>X</em>, <em>y=None</em>)</td>
<td>Compute the minimum and maximum to be used for later scaling.</td>
</tr>
<tr>
<td><code>fit_transform</code>(<em>self</em>, <em>X</em>, <em>y=None</em>, **<em>fit_params</em>)</td>
<td>Fit to data, then transform it.</td>
</tr>
<tr>
<td><code>inverse_transform</code>(<em>self</em>, <em>X</em>)</td>
<td>Undo the scaling of X according to feature_range.</td>
</tr>
<tr>
<td><code>transform</code>(<em>self</em>, <em>X</em>)</td>
<td>Scale features of X according to feature_range.</td>
</tr>
</tbody></table>
<h2 id="svm-SVC"><a href="#svm-SVC" class="headerlink" title="svm.SVC"></a>svm.SVC</h2><p><em>class</em> <code>sklearn.svm.``SVC</code>(<em>C=1.0</em>, <em>kernel=’rbf’</em>, <em>degree=3</em>, <em>gamma=’scale’</em>, <em>coef0=0.0</em>, <em>shrinking=True</em>, <em>probability=False</em>, <em>tol=0.001</em>, <em>cache_size=200</em>, <em>class_weight=None</em>, <em>verbose=False</em>, <em>max_iter=-1</em>, <em>decision_function_shape=’ovr’</em>, <em>break_ties=False</em>, <em>random_state=None</em>)</p>
<p><strong>C</strong>  惩罚系数，对误差的宽容度</p>
<ul>
<li>C越高，说明越不能容忍出现误差，容易出现过拟合。</li>
<li>C太小，容易欠拟合</li>
</ul>
<p><strong>gamma</strong></p>
<p>​    选择RBF作为核函数后，该函数自带的一个参数，隐含地决定了数据映射到新的特征空间的分布。</p>
<ul>
<li>如果gamma设的<strong>太大</strong>（<strong>支持向量少</strong>），方差会很小，高斯分布“高瘦”，会造成只作用于支持向量样本附近，对未知样本的分类效果很差。存在训练准确率可以很高，但是测试准确率不高的情况，出现<strong>过训练</strong>。</li>
<li>如果gamma设的<strong>太小</strong>（<strong>支持向量多</strong>），则会造成平滑效应过大，无法在训练集上获得很高的准确率。</li>
</ul>
<table>
<thead>
<tr>
<th>Attributes</th>
<th>Introduction</th>
</tr>
</thead>
<tbody><tr>
<td><strong>support_</strong></td>
<td>Indices of support vectors.</td>
</tr>
<tr>
<td><strong>support_vectors_</strong></td>
<td>Support vectors.</td>
</tr>
<tr>
<td><strong>n_support_</strong></td>
<td>Number of support vectors for each class.</td>
</tr>
<tr>
<td><strong>fit_status_</strong></td>
<td>0 if correctly fitted, 1 otherwise (will raise warning)</td>
</tr>
<tr>
<td><strong>classes_</strong></td>
<td>The classes labels.</td>
</tr>
<tr>
<td><strong>class_weight_</strong></td>
<td>Multipliers of parameter C for each class. Computed based on the <code>class_weight</code> parameter.</td>
</tr>
<tr>
<td><strong>shape_fit_</strong></td>
<td>Array dimensions of training vector <code>X</code>.</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Methods</th>
<th>Introduction</th>
</tr>
</thead>
<tbody><tr>
<td><code>decision_function</code>(<em>self</em>, <em>X</em>)</td>
<td>Evaluates the decision function for the samples in X.</td>
</tr>
<tr>
<td><code>fit</code>(<em>self</em>, <em>X</em>, <em>y</em>, <em>sample_weight=None</em>)</td>
<td>Fit the SVM model according to the given training data.</td>
</tr>
<tr>
<td><code>get_params</code>(<em>self</em>, <em>deep=True</em>)</td>
<td>Get parameters for this estimator.</td>
</tr>
<tr>
<td><code>predict</code>(<em>self</em>, <em>X</em>)</td>
<td>Perform classification on samples in X.</td>
</tr>
<tr>
<td><code>score</code>(<em>self</em>, <em>X</em>, <em>y</em>, <em>sample_weight=None</em>)</td>
<td>Return the <strong>mean accuracy</strong> on the given test data and labels.</td>
</tr>
<tr>
<td><code>set_params</code>(<em>self</em>, **<em>params</em>)</td>
<td>Set the parameters of this estimator.</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>oh-my-zsh 配置</title>
    <url>/2020/08/11/oh-my-zsh-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="oh-my-zsh-配置"><a href="#oh-my-zsh-配置" class="headerlink" title="oh-my-zsh 配置"></a>oh-my-zsh 配置</h1><h2 id="一、clone-项目"><a href="#一、clone-项目" class="headerlink" title="一、clone 项目"></a>一、clone 项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com.cnpmjs.org/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure>

<h2 id="二、复制-zshrc"><a href="#二、复制-zshrc" class="headerlink" title="二、复制 .zshrc"></a>二、复制 .zshrc</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="三、更改默认-Shell"><a href="#三、更改默认-Shell" class="headerlink" title="三、更改默认 Shell"></a>三、更改默认 Shell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>

<p>查看当前shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line"><span class="comment"># &quot;如果切换之后还是bash，重启终端&quot;</span></span><br></pre></td></tr></table></figure>

<p>激活配置文件 <code>.zshrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure>

<p>得到结果如下：</p>
<p><img src="https://i.loli.net/2021/05/16/XPYRoOyv6Bh81eM.png" alt="oh-my-zsh%20%E9%85%8D%E7%BD%AE%20ecf592a1f6604e968d0fc07981e66d1c/Untitled.png"></p>
<h2 id="四、配置主题"><a href="#四、配置主题" class="headerlink" title="四、配置主题"></a>四、配置主题</h2><p>在 <code>.zshrc</code>配置文件中修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">&quot;agnoster&quot;</span></span><br></pre></td></tr></table></figure>

<p>激活配置文件<code>.zshrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure>

<p>得到结果如下：</p>
<p><img src="https://i.loli.net/2021/05/16/iuhd8XHFnJfPjDG.png" alt="oh-my-zsh%20%E9%85%8D%E7%BD%AE%20ecf592a1f6604e968d0fc07981e66d1c/Untitled%201.png"></p>
<h2 id="五、配置插件"><a href="#五、配置插件" class="headerlink" title="五、配置插件"></a>五、配置插件</h2><h3 id="（1）zsh-syntax-highlighting-命令语法高亮"><a href="#（1）zsh-syntax-highlighting-命令语法高亮" class="headerlink" title="（1）zsh-syntax-highlighting(命令语法高亮)"></a>（1）zsh-syntax-highlighting(命令语法高亮)</h3><ol>
<li><p>Clone项目到$ZSH_CUSTOM/plugins文件夹下 (默认为 ~/.oh-my-zsh/custom/plugins)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com.cnpmjs.org/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></li>
<li><p>在 Oh My Zsh 的配置文件 (~/.zshrc)中设置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(其他插件 zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure></li>
<li><p>运行 <code>source ~/.zshrc</code> 更新配置</p>
</li>
</ol>
<h3 id="（2）zsh-autosuggestions-命令自动补全"><a href="#（2）zsh-autosuggestions-命令自动补全" class="headerlink" title="（2）zsh-autosuggestions(命令自动补全)"></a>（2）zsh-autosuggestions(命令自动补全)</h3><ol>
<li><p>Clone项目到$ZSH_CUSTOM/plugins文件夹下 (默认为 ~/.oh-my-zsh/custom/plugins)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com.cnpmjs.org/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></li>
<li><p>在 Oh My Zsh 的配置文件 (~/.zshrc)中设置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(其他插件 zsh-autosuggestions)</span><br></pre></td></tr></table></figure></li>
<li><p>运行 <code>source ~/.zshrc</code> 更新配置</p>
<blockquote>
<p>当重新打开终端的时候可能看不到变化，可能你的字体颜色太淡了，我们把其改亮一些：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</span><br><span class="line">vim zsh-autosuggestions.zsh</span><br><span class="line">vim ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line"><span class="comment"># 修改 ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&#x27;fg=10&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改成功后需要运行 source ~/.zshrc 更新配置</p>
</blockquote>
</li>
<li><p>自定义快捷键</p>
<p>如果感觉 → 补全不方便，还可以自定义补全的快捷键，比如我设置的逗号补全，只需要在 <code>.zshrc</code> 文件下方添加这句话</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;,&#x27;</span> autosuggest-accept</span><br></pre></td></tr></table></figure>

<p>运行 <code>source ~/.zshrc</code> 更新配置</p>
</li>
</ol>
<h2 id="六、-zshrc-样例"><a href="#六、-zshrc-样例" class="headerlink" title="六、.zshrc 样例"></a>六、.zshrc 样例</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># If you come from bash you might have to change your $PATH.</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:~/anaconda3/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles</span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_281.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to your oh-my-zsh installation.</span></span><br><span class="line"><span class="built_in">export</span> ZSH=<span class="string">&quot;/Users/fan/.oh-my-zsh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set name of the theme to load --- if set to &quot;random&quot;, it will</span></span><br><span class="line"><span class="comment"># load a random theme each time oh-my-zsh is loaded, in which case,</span></span><br><span class="line"><span class="comment"># to know which specific one was loaded, run: echo $RANDOM_THEME</span></span><br><span class="line"><span class="comment"># See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;agnoster&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set list of themes to pick from when loading at random</span></span><br><span class="line"><span class="comment"># Setting this variable when ZSH_THEME=random will cause zsh to load</span></span><br><span class="line"><span class="comment"># a theme from this variable instead of looking in $ZSH/themes/</span></span><br><span class="line"><span class="comment"># If set to an empty array, this variable will have no effect.</span></span><br><span class="line"><span class="comment"># ZSH_THEME_RANDOM_CANDIDATES=( &quot;robbyrussell&quot; &quot;agnoster&quot; )</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to use case-sensitive completion.</span></span><br><span class="line"><span class="comment"># CASE_SENSITIVE=&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to use hyphen-insensitive completion.</span></span><br><span class="line"><span class="comment"># Case-sensitive completion must be off. _ and - will be interchangeable.</span></span><br><span class="line"><span class="comment"># HYPHEN_INSENSITIVE=&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to disable bi-weekly auto-update checks.</span></span><br><span class="line"><span class="comment"># DISABLE_AUTO_UPDATE=&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to automatically update without prompting.</span></span><br><span class="line"><span class="comment"># DISABLE_UPDATE_PROMPT=&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to change how often to auto-update (in days).</span></span><br><span class="line"><span class="comment"># export UPDATE_ZSH_DAYS=13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line if pasting URLs and other text is messed up.</span></span><br><span class="line"><span class="comment"># DISABLE_MAGIC_FUNCTIONS=&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to disable colors in ls.</span></span><br><span class="line"><span class="comment"># DISABLE_LS_COLORS=&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to disable auto-setting terminal title.</span></span><br><span class="line"><span class="comment"># DISABLE_AUTO_TITLE=&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to enable command auto-correction.</span></span><br><span class="line"><span class="comment"># ENABLE_CORRECTION=&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to display red dots whilst waiting for completion.</span></span><br><span class="line"><span class="comment"># COMPLETION_WAITING_DOTS=&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line if you want to disable marking untracked files</span></span><br><span class="line"><span class="comment"># under VCS as dirty. This makes repository status check for large repositories</span></span><br><span class="line"><span class="comment"># much, much faster.</span></span><br><span class="line"><span class="comment"># DISABLE_UNTRACKED_FILES_DIRTY=&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line if you want to change the command execution time</span></span><br><span class="line"><span class="comment"># stamp shown in the history command output.</span></span><br><span class="line"><span class="comment"># You can set one of the optional three formats:</span></span><br><span class="line"><span class="comment"># &quot;mm/dd/yyyy&quot;|&quot;dd.mm.yyyy&quot;|&quot;yyyy-mm-dd&quot;</span></span><br><span class="line"><span class="comment"># or set a custom format using the strftime function format specifications,</span></span><br><span class="line"><span class="comment"># see &#x27;man strftime&#x27; for details.</span></span><br><span class="line"><span class="comment"># HIST_STAMPS=&quot;mm/dd/yyyy&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Would you like to use another custom folder than $ZSH/custom?</span></span><br><span class="line"><span class="comment"># ZSH_CUSTOM=/path/to/new-custom-folder</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Which plugins would you like to load?</span></span><br><span class="line"><span class="comment"># Standard plugins can be found in $ZSH/plugins/</span></span><br><span class="line"><span class="comment"># Custom plugins may be added to $ZSH_CUSTOM/plugins/</span></span><br><span class="line"><span class="comment"># Example format: plugins=(rails git textmate ruby lighthouse)</span></span><br><span class="line"><span class="comment"># Add wisely, as too many plugins slow down shell startup.</span></span><br><span class="line">plugins=(git zsh-syntax-highlighting zsh-autosuggestions)</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;,&#x27;</span> autosuggest-accept</span><br><span class="line"></span><br><span class="line"><span class="comment"># User configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># export MANPATH=&quot;/usr/local/man:$MANPATH&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You may need to manually set your language environment</span></span><br><span class="line"><span class="comment"># export LANG=en_US.UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Preferred editor for local and remote sessions</span></span><br><span class="line"><span class="comment"># if [[ -n $SSH_CONNECTION ]]; then</span></span><br><span class="line"><span class="comment">#   export EDITOR=&#x27;vim&#x27;</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#   export EDITOR=&#x27;mvim&#x27;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Compilation flags</span></span><br><span class="line"><span class="comment"># export ARCHFLAGS=&quot;-arch x86_64&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set personal aliases, overriding those provided by oh-my-zsh libs,</span></span><br><span class="line"><span class="comment"># plugins, and themes. Aliases can be placed here, though oh-my-zsh</span></span><br><span class="line"><span class="comment"># users are encouraged to define aliases within the ZSH_CUSTOM folder.</span></span><br><span class="line"><span class="comment"># For a full list of active aliases, run `alias`.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example aliases</span></span><br><span class="line"><span class="comment"># alias zshconfig=&quot;mate ~/.zshrc&quot;</span></span><br><span class="line"><span class="comment"># alias ohmyzsh=&quot;mate ~/.oh-my-zsh&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>macOs</tag>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器常用指令</title>
    <url>/2021/03/16/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="服务器常用指令"><a href="#服务器常用指令" class="headerlink" title="服务器常用指令"></a>服务器常用指令</h1><p>Status: Linux</p>
<p>查看系统信息</p>
<p><code>uname -a</code></p>
<p>查看centos版本</p>
<p><code>cat /etc/redhat-release</code></p>
<p>给普通用户添加sudo权限</p>
<ul>
<li><p>Ubuntu</p>
<p><code>sudo usermod -aG sudo username</code></p>
</li>
<li><p>CentOS</p>
<p><code>sudo usermod -aG wheel username</code></p>
</li>
</ul>
<p>更改用户home目录</p>
<ol>
<li>在sudo用户shell下</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -d `/usr/newfolder` -u `uid` `username`</span><br></pre></td></tr></table></figure>

<ul>
<li><code>uid</code>: 通过 <code>id username</code> 来获取</li>
</ul>
<ol start="2">
<li>将原home目录下内容复制到新目录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp -R `/origin/home/.` `/new/home`</span><br></pre></td></tr></table></figure>

<p>实验室服务器登陆校园网</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -d <span class="string">&#x27;user=xxx&amp;pass=xxx&#x27;</span> <span class="string">&quot;http://10.3.8.211/login&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2017/05/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>给容器安装 SSH 服务</title>
    <url>/2021/01/16/%E7%BB%99%E5%AE%B9%E5%99%A8%E5%AE%89%E8%A3%85SSH%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="给容器安装-SSH-服务"><a href="#给容器安装-SSH-服务" class="headerlink" title="给容器安装 SSH 服务"></a>给容器安装 SSH 服务</h1><h2 id="启动-Container"><a href="#启动-Container" class="headerlink" title="启动 Container"></a>启动 Container</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it [containerID] /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="安装SSH服务"><a href="#安装SSH服务" class="headerlink" title="安装SSH服务"></a>安装SSH服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install openssh-server</span><br></pre></td></tr></table></figure>

<h2 id="启动SSH服务"><a href="#启动SSH服务" class="headerlink" title="启动SSH服务"></a>启动SSH服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service ssh satrt</span><br></pre></td></tr></table></figure>

<h2 id="安装Vim"><a href="#安装Vim" class="headerlink" title="安装Vim"></a>安装Vim</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure>

<h2 id="更改SSH服务配置"><a href="#更改SSH服务配置" class="headerlink" title="更改SSH服务配置"></a>更改SSH服务配置</h2><p><code>vim /etc/ssh/sshd_config</code></p>
<p>将PermitRootLogin的值从withoutPassword改为yes，允许root用户进行登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure>

<h2 id="设置root用户登陆密码"><a href="#设置root用户登陆密码" class="headerlink" title="设置root用户登陆密码"></a>设置root用户登陆密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>

<h2 id="重启SSH服务"><a href="#重启SSH服务" class="headerlink" title="重启SSH服务"></a>重启SSH服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service ssh restart</span><br></pre></td></tr></table></figure>

<h2 id="退出当前容器"><a href="#退出当前容器" class="headerlink" title="退出当前容器"></a>退出当前容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h2 id="保存镜像到本地"><a href="#保存镜像到本地" class="headerlink" title="保存镜像到本地"></a>保存镜像到本地</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit [containerID] [imagename]:[version]</span><br></pre></td></tr></table></figure>

<h2 id="重启镜像"><a href="#重启镜像" class="headerlink" title="重启镜像"></a>重启镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -d -p 8400:20 -p 8855:22 --name [containername] [imagename]:[tag]</span><br></pre></td></tr></table></figure>

<h2 id="让容器保持运行"><a href="#让容器保持运行" class="headerlink" title="让容器保持运行"></a>让容器保持运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker update --restart=always &lt;containerID&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>远程连接</tag>
        <tag>SSH</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas</title>
    <url>/2020/03/14/Pandas/</url>
    <content><![CDATA[<p>如果用 python 的列表和字典来作比较, 那么可以说 Numpy 是列表形式的，没有数值标签，而 Pandas 就是字典形式。Pandas是基于Numpy构建的，让Numpy为中心的应用变得更加简单。</p>
<span id="more"></span>

<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p><code>Series</code>的字符串表现形式为：索引在左边，值在右边。<br>由于没有为数据指定索引。于是会自动创建一个0到N-1（N为长度）的整数型索引。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,np.nan,<span class="number">44</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0     1.0</span></span><br><span class="line"><span class="string">1     3.0</span></span><br><span class="line"><span class="string">2     6.0</span></span><br><span class="line"><span class="string">3     NaN</span></span><br><span class="line"><span class="string">4    44.0</span></span><br><span class="line"><span class="string">5     1.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>


<h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p><code>DataFrame</code>是一个<strong>表格型</strong>的数据结构，它包含有一组有序的列，每列可以是不同的值类型（数值，字符串等）<br><code>DataFrame</code>既有行索引也有列索引， 它可以被看做由<code>Series</code>组成的大字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dates = pd.date_range(<span class="string">&#x27;20160101&#x27;</span>,periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>),index=dates,columns=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                   a         b         c         d</span></span><br><span class="line"><span class="string">2016-01-01 -0.253065 -2.071051 -0.640515  0.613663</span></span><br><span class="line"><span class="string">2016-01-02 -1.147178  1.532470  0.989255 -0.499761</span></span><br><span class="line"><span class="string">2016-01-03  1.221656 -2.390171  1.862914  0.778070</span></span><br><span class="line"><span class="string">2016-01-04  1.473877 -0.046419  0.610046  0.204672</span></span><br><span class="line"><span class="string">2016-01-05 -1.584752 -0.700592  1.487264 -1.778293</span></span><br><span class="line"><span class="string">2016-01-06  0.633675 -1.414157 -0.277066 -0.442545</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2016-01-01   -2.071051</span></span><br><span class="line"><span class="string">2016-01-02    1.532470</span></span><br><span class="line"><span class="string">2016-01-03   -2.390171</span></span><br><span class="line"><span class="string">2016-01-04   -0.046419</span></span><br><span class="line"><span class="string">2016-01-05   -0.700592</span></span><br><span class="line"><span class="string">2016-01-06   -1.414157</span></span><br><span class="line"><span class="string">Freq: D, Name: b, dtype: float64</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>创建一组没有给定行标签和列标签的数据 <code>df1</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   0  1   2   3</span></span><br><span class="line"><span class="string">0  0  1   2   3</span></span><br><span class="line"><span class="string">1  4  5   6   7</span></span><br><span class="line"><span class="string">2  8  9  10  11</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>另一种生成 <code>df</code> 的方法, 如下 <code>df2</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span> : <span class="number">1.</span>,</span><br><span class="line">                    <span class="string">&#x27;B&#x27;</span> : pd.Timestamp(<span class="string">&#x27;20130102&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;C&#x27;</span> : pd.Series(<span class="number">1</span>,index=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">4</span>)),dtype=<span class="string">&#x27;float32&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;D&#x27;</span> : np.array([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="string">&#x27;int32&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;E&#x27;</span> : pd.Categorical([<span class="string">&quot;test&quot;</span>,<span class="string">&quot;train&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="string">&quot;train&quot;</span>]),</span><br><span class="line">                    <span class="string">&#x27;F&#x27;</span> : <span class="string">&#x27;foo&#x27;</span>&#125;)</span><br><span class="line">                    </span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">     A          B    C  D      E    F</span></span><br><span class="line"><span class="string">0  1.0 2013-01-02  1.0  3   test  foo</span></span><br><span class="line"><span class="string">1  1.0 2013-01-02  1.0  3  train  foo</span></span><br><span class="line"><span class="string">2  1.0 2013-01-02  1.0  3   test  foo</span></span><br><span class="line"><span class="string">3  1.0 2013-01-02  1.0  3  train  foo</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><h5 id="dtypes"><a href="#dtypes" class="headerlink" title="dtypes"></a>dtypes</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df2.dtypes)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">df2.dtypes</span></span><br><span class="line"><span class="string">A           float64</span></span><br><span class="line"><span class="string">B    datetime64[ns]</span></span><br><span class="line"><span class="string">C           float32</span></span><br><span class="line"><span class="string">D             int32</span></span><br><span class="line"><span class="string">E          category</span></span><br><span class="line"><span class="string">F            object</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="index"><a href="#index" class="headerlink" title="index"></a>index</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df2.index)</span><br><span class="line"><span class="comment"># Int64Index([0, 1, 2, 3], dtype=&#x27;int64&#x27;)</span></span><br></pre></td></tr></table></figure>

<h5 id="columns"><a href="#columns" class="headerlink" title="columns"></a>columns</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df2.columns)</span><br><span class="line"><span class="comment"># Index([&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;], dtype=&#x27;object&#x27;)</span></span><br></pre></td></tr></table></figure>

<h5 id="values"><a href="#values" class="headerlink" title="values"></a>values</h5><p>只看所有<code>df2</code>的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df2.values)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;test&#x27;, &#x27;foo&#x27;],</span></span><br><span class="line"><span class="string">       [1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;train&#x27;, &#x27;foo&#x27;],</span></span><br><span class="line"><span class="string">       [1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;test&#x27;, &#x27;foo&#x27;],</span></span><br><span class="line"><span class="string">       [1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;train&#x27;, &#x27;foo&#x27;]], dtype=object)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="T-转置"><a href="#T-转置" class="headerlink" title="T 转置"></a>T 转置</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df2.T)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;                   </span></span><br><span class="line"><span class="string">                     0                    1                    2</span></span><br><span class="line"><span class="string">A                    1                    1                    1   </span></span><br><span class="line"><span class="string">B  2013-01-02 00:00:00  2013-01-02 00:00:00  2013-01-02 00:00:00   </span></span><br><span class="line"><span class="string">C                    1                    1                    1   </span></span><br><span class="line"><span class="string">D                    3                    3                    3   </span></span><br><span class="line"><span class="string">E                 test                train                 test   </span></span><br><span class="line"><span class="string">F                  foo                  foo                  foo   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                     3  </span></span><br><span class="line"><span class="string">A                    1  </span></span><br><span class="line"><span class="string">B  2013-01-02 00:00:00  </span></span><br><span class="line"><span class="string">C                    1  </span></span><br><span class="line"><span class="string">D                    3  </span></span><br><span class="line"><span class="string">E                train  </span></span><br><span class="line"><span class="string">F                  foo  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="describe"><a href="#describe" class="headerlink" title="describe()"></a>describe()</h5><p>数据的总结</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df2.describe()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">         A    C    D</span></span><br><span class="line"><span class="string">count  4.0  4.0  4.0</span></span><br><span class="line"><span class="string">mean   1.0  1.0  3.0</span></span><br><span class="line"><span class="string">std    0.0  0.0  0.0</span></span><br><span class="line"><span class="string">min    1.0  1.0  3.0</span></span><br><span class="line"><span class="string">25%    1.0  1.0  3.0</span></span><br><span class="line"><span class="string">50%    1.0  1.0  3.0</span></span><br><span class="line"><span class="string">75%    1.0  1.0  3.0</span></span><br><span class="line"><span class="string">max    1.0  1.0  3.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="sort-index"><a href="#sort-index" class="headerlink" title="sort_index()"></a>sort_index()</h5><p>对数据的 <code>index</code> 进行排序并输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df2.sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)) <span class="comment">#对列排序</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">     F      E  D    C          B    A</span></span><br><span class="line"><span class="string">0  foo   test  3  1.0 2013-01-02  1.0</span></span><br><span class="line"><span class="string">1  foo  train  3  1.0 2013-01-02  1.0</span></span><br><span class="line"><span class="string">2  foo   test  3  1.0 2013-01-02  1.0</span></span><br><span class="line"><span class="string">3  foo  train  3  1.0 2013-01-02  1.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果是对数据 值 排序输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df2.sort_values(by=<span class="string">&#x27;B&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">     A          B    C  D      E    F</span></span><br><span class="line"><span class="string">0  1.0 2013-01-02  1.0  3   test  foo</span></span><br><span class="line"><span class="string">1  1.0 2013-01-02  1.0  3  train  foo</span></span><br><span class="line"><span class="string">2  1.0 2013-01-02  1.0  3   test  foo</span></span><br><span class="line"><span class="string">3  1.0 2013-01-02  1.0  3  train  foo</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="选择数据"><a href="#选择数据" class="headerlink" title="选择数据"></a>选择数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dates = pd.date_range(<span class="string">&#x27;20130101&#x27;</span>, periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates, columns=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">             A   B   C   D</span></span><br><span class="line"><span class="string">2013-01-01   0   1   2   3</span></span><br><span class="line"><span class="string">2013-01-02   4   5   6   7</span></span><br><span class="line"><span class="string">2013-01-03   8   9  10  11</span></span><br><span class="line"><span class="string">2013-01-04  12  13  14  15</span></span><br><span class="line"><span class="string">2013-01-05  16  17  18  19</span></span><br><span class="line"><span class="string">2013-01-06  20  21  22  23</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;A&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df.A)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2013-01-01     0</span></span><br><span class="line"><span class="string">2013-01-02     4</span></span><br><span class="line"><span class="string">2013-01-03     8</span></span><br><span class="line"><span class="string">2013-01-04    12</span></span><br><span class="line"><span class="string">2013-01-05    16</span></span><br><span class="line"><span class="string">2013-01-06    20</span></span><br><span class="line"><span class="string">Freq: D, Name: A, dtype: int64</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>跨行/列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            A  B   C   D</span></span><br><span class="line"><span class="string">2013-01-01  0  1   2   3</span></span><br><span class="line"><span class="string">2013-01-02  4  5   6   7</span></span><br><span class="line"><span class="string">2013-01-03  8  9  10  11</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;20130102&#x27;</span>:<span class="string">&#x27;20130104&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">A   B   C   D</span></span><br><span class="line"><span class="string">2013-01-02   4   5   6   7</span></span><br><span class="line"><span class="string">2013-01-03   8   9  10  11</span></span><br><span class="line"><span class="string">2013-01-04  12  13  14  15</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="loc-根据标签"><a href="#loc-根据标签" class="headerlink" title="loc 根据标签"></a>loc 根据标签</h3><p>通过标签名字选择某一行数据， 或者通过选择某行或者所有行（<code>:</code>代表所有行）然后选其中某一列或几列数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&#x27;20130102&#x27;</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">A    4</span></span><br><span class="line"><span class="string">B    5</span></span><br><span class="line"><span class="string">C    6</span></span><br><span class="line"><span class="string">D    7</span></span><br><span class="line"><span class="string">Name: 2013-01-02 00:00:00, dtype: int64</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[:,[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>]]) </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">             A   B</span></span><br><span class="line"><span class="string">2013-01-01   0   1</span></span><br><span class="line"><span class="string">2013-01-02   4   5</span></span><br><span class="line"><span class="string">2013-01-03   8   9</span></span><br><span class="line"><span class="string">2013-01-04  12  13</span></span><br><span class="line"><span class="string">2013-01-05  16  17</span></span><br><span class="line"><span class="string">2013-01-06  20  21</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&#x27;20130102&#x27;</span>,[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>]])</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">A    4</span></span><br><span class="line"><span class="string">B    5</span></span><br><span class="line"><span class="string">Name: 2013-01-02 00:00:00, dtype: int64</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="iloc-根据序列"><a href="#iloc-根据序列" class="headerlink" title="iloc 根据序列"></a>iloc 根据序列</h3><p>通过位置选择在不同情况下所需要的数据例如选某一个，连续选或者跨行选等操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">3</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 13</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">3</span>:<span class="number">5</span>,<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">             B   C</span></span><br><span class="line"><span class="string">2013-01-04  13  14</span></span><br><span class="line"><span class="string">2013-01-05  17  18</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.iloc[[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>],<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">             B   C</span></span><br><span class="line"><span class="string">2013-01-02   5   6</span></span><br><span class="line"><span class="string">2013-01-04  13  14</span></span><br><span class="line"><span class="string">2013-01-06  21  22</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="ix-混合两种"><a href="#ix-混合两种" class="headerlink" title="ix 混合两种"></a>ix 混合两种</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.ix[:<span class="number">3</span>,[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;C&#x27;</span>]])</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            A   C</span></span><br><span class="line"><span class="string">2013-01-01  0   2</span></span><br><span class="line"><span class="string">2013-01-02  4   6</span></span><br><span class="line"><span class="string">2013-01-03  8  10</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Boolean-indexing"><a href="#Boolean-indexing" class="headerlink" title="Boolean indexing"></a>Boolean indexing</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df[df.A&gt;<span class="number">8</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">             A   B   C   D</span></span><br><span class="line"><span class="string">2013-01-04  12  13  14  15</span></span><br><span class="line"><span class="string">2013-01-05  16  17  18  19</span></span><br><span class="line"><span class="string">2013-01-06  20  21  22  23</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dates = pd.date_range(<span class="string">&#x27;20130101&#x27;</span>, periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates, columns=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">             A   B   C   D</span></span><br><span class="line"><span class="string">2013-01-01   0   1   2   3</span></span><br><span class="line"><span class="string">2013-01-02   4   5   6   7</span></span><br><span class="line"><span class="string">2013-01-03   8   9  10  11</span></span><br><span class="line"><span class="string">2013-01-04  12  13  14  15</span></span><br><span class="line"><span class="string">2013-01-05  16  17  18  19</span></span><br><span class="line"><span class="string">2013-01-06  20  21  22  23</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="根据iloc-loc"><a href="#根据iloc-loc" class="headerlink" title="根据iloc/loc"></a>根据iloc/loc</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.iloc[<span class="number">2</span>,<span class="number">2</span>] = <span class="number">1111</span></span><br><span class="line">df.loc[<span class="string">&#x27;20130101&#x27;</span>,<span class="string">&#x27;B&#x27;</span>] = <span class="number">2222</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">             A     B     C   D</span></span><br><span class="line"><span class="string">2013-01-01   0  2222     2   3</span></span><br><span class="line"><span class="string">2013-01-02   4     5     6   7</span></span><br><span class="line"><span class="string">2013-01-03   8     9  1111  11</span></span><br><span class="line"><span class="string">2013-01-04  12    13    14  15</span></span><br><span class="line"><span class="string">2013-01-05  16    17    18  19</span></span><br><span class="line"><span class="string">2013-01-06  20    21    22  23</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="根据条件设置"><a href="#根据条件设置" class="headerlink" title="根据条件设置"></a>根据条件设置</h3><p>如果现在的判断条件是这样, 我们想要更改<code>B</code>中的数, 而更改的位置是取决于 <code>A</code> 的. 对于<code>A</code>大于4的位置. 更改<code>B</code>在相应位置上的数为0。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.B[df.A&gt;<span class="number">4</span>] = <span class="number">0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                A     B     C   D</span></span><br><span class="line"><span class="string">2013-01-01   0  2222     2   3</span></span><br><span class="line"><span class="string">2013-01-02   4     5     6   7</span></span><br><span class="line"><span class="string">2013-01-03   8     0  1111  11</span></span><br><span class="line"><span class="string">2013-01-04  12     0    14  15</span></span><br><span class="line"><span class="string">2013-01-05  16     0    18  19</span></span><br><span class="line"><span class="string">2013-01-06  20     0    22  23 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="按行或列设置"><a href="#按行或列设置" class="headerlink" title="按行或列设置"></a>按行或列设置</h3><p>如果对整列做批处理, 加上一列 ‘F’, 并将 <code>F</code> 列全改为 <code>NaN</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;F&#x27;</span>] = np.nan</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">             A     B     C   D   F</span></span><br><span class="line"><span class="string">2013-01-01   0  2222     2   3 NaN</span></span><br><span class="line"><span class="string">2013-01-02   4     5     6   7 NaN</span></span><br><span class="line"><span class="string">2013-01-03   8     0  1111  11 NaN</span></span><br><span class="line"><span class="string">2013-01-04  12     0    14  15 NaN</span></span><br><span class="line"><span class="string">2013-01-05  16     0    18  19 NaN</span></span><br><span class="line"><span class="string">2013-01-06  20     0    22  23 NaN</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;E&#x27;</span>] = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], index=pd.date_range(<span class="string">&#x27;20130101&#x27;</span>,periods=<span class="number">6</span>)) </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">             A     B     C   D   F  E</span></span><br><span class="line"><span class="string">2013-01-01   0  2222     2   3 NaN  1</span></span><br><span class="line"><span class="string">2013-01-02   4     5     6   7 NaN  2</span></span><br><span class="line"><span class="string">2013-01-03   8     0  1111  11 NaN  3</span></span><br><span class="line"><span class="string">2013-01-04  12     0    14  15 NaN  4</span></span><br><span class="line"><span class="string">2013-01-05  16     0    18  19 NaN  5</span></span><br><span class="line"><span class="string">2013-01-06  20     0    22  23 NaN  6</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="处理丢失数据"><a href="#处理丢失数据" class="headerlink" title="处理丢失数据"></a>处理丢失数据</h2><h3 id="创建含-NaN-的矩阵"><a href="#创建含-NaN-的矩阵" class="headerlink" title="创建含 NaN 的矩阵"></a>创建含 NaN 的矩阵</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dates = pd.date_range(<span class="string">&#x27;20130101&#x27;</span>, periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates, columns=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>])</span><br><span class="line">df.iloc[<span class="number">0</span>,<span class="number">1</span>] = np.nan</span><br><span class="line">df.iloc[<span class="number">1</span>,<span class="number">2</span>] = np.nan</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">             A     B     C   D</span></span><br><span class="line"><span class="string">2013-01-01   0   NaN   2.0   3</span></span><br><span class="line"><span class="string">2013-01-02   4   5.0   NaN   7</span></span><br><span class="line"><span class="string">2013-01-03   8   9.0  10.0  11</span></span><br><span class="line"><span class="string">2013-01-04  12  13.0  14.0  15</span></span><br><span class="line"><span class="string">2013-01-05  16  17.0  18.0  19</span></span><br><span class="line"><span class="string">2013-01-06  20  21.0  22.0  23</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="pd-dropna"><a href="#pd-dropna" class="headerlink" title="pd.dropna()"></a>pd.dropna()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.dropna(</span><br><span class="line">    axis=<span class="number">0</span>,     <span class="comment"># 0: 对行进行操作; 1: 对列进行操作</span></span><br><span class="line">    how=<span class="string">&#x27;any&#x27;</span>   <span class="comment"># &#x27;any&#x27;: 只要存在 NaN 就 drop 掉; &#x27;all&#x27;: 必须全部是 NaN 才 drop </span></span><br><span class="line">    ) </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">             A     B     C   D</span></span><br><span class="line"><span class="string">2013-01-03   8   9.0  10.0  11</span></span><br><span class="line"><span class="string">2013-01-04  12  13.0  14.0  15</span></span><br><span class="line"><span class="string">2013-01-05  16  17.0  18.0  19</span></span><br><span class="line"><span class="string">2013-01-06  20  21.0  22.0  23</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="pd-fillna"><a href="#pd-fillna" class="headerlink" title="pd.fillna()"></a>pd.fillna()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.fillna(value=<span class="number">0</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">             A     B     C   D</span></span><br><span class="line"><span class="string">2013-01-01   0   0.0   2.0   3</span></span><br><span class="line"><span class="string">2013-01-02   4   5.0   0.0   7</span></span><br><span class="line"><span class="string">2013-01-03   8   9.0  10.0  11</span></span><br><span class="line"><span class="string">2013-01-04  12  13.0  14.0  15</span></span><br><span class="line"><span class="string">2013-01-05  16  17.0  18.0  19</span></span><br><span class="line"><span class="string">2013-01-06  20  21.0  22.0  23</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="pd-isnull"><a href="#pd-isnull" class="headerlink" title="pd.isnull()"></a>pd.isnull()</h3><p>判断是否有缺失数据 <code>NaN</code>, 为 <code>True</code> 表示缺失数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.isnull() </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                A      B      C      D</span></span><br><span class="line"><span class="string">2013-01-01  False   True  False  False</span></span><br><span class="line"><span class="string">2013-01-02  False  False   True  False</span></span><br><span class="line"><span class="string">2013-01-03  False  False  False  False</span></span><br><span class="line"><span class="string">2013-01-04  False  False  False  False</span></span><br><span class="line"><span class="string">2013-01-05  False  False  False  False</span></span><br><span class="line"><span class="string">2013-01-06  False  False  False  False</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>检测在数据中是否存在 <code>NaN</code>, 如果存在就返回 <code>True</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.<span class="built_in">any</span>(df.isnull()) == <span class="literal">True</span>  </span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>



<h2 id="文件导入导出"><a href="#文件导入导出" class="headerlink" title="文件导入导出"></a>文件导入导出</h2><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment">#加载模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取csv</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;student.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印出data</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>

<h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>将资料存取成pickle</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.to_pickle(<span class="string">&#x27;student.pickle&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="合并-concat"><a href="#合并-concat" class="headerlink" title="合并 concat"></a>合并 concat</h2><p><code>axis=0</code>是预设值，因此未设定任何参数时，函数默认<code>axis=0</code>，纵向。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集</span></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>, columns=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">df3 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">2</span>, columns=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#concat纵向合并</span></span><br><span class="line">res = pd.concat([df1, df2, df3], axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印结果</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#     a    b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 0  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 1  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 2  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 0  2.0  2.0  2.0  2.0</span></span><br><span class="line"><span class="comment"># 1  2.0  2.0  2.0  2.0</span></span><br><span class="line"><span class="comment"># 2  2.0  2.0  2.0  2.0</span></span><br></pre></td></tr></table></figure>

<h3 id="ignore-index"><a href="#ignore-index" class="headerlink" title="ignore_index"></a>ignore_index</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#承上一个例子，并将index_ignore设定为True</span></span><br><span class="line">res = pd.concat([df1, df2, df3], axis=<span class="number">0</span>, ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印结果</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#     a    b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 3  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 5  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 6  2.0  2.0  2.0  2.0</span></span><br><span class="line"><span class="comment"># 7  2.0  2.0  2.0  2.0</span></span><br><span class="line"><span class="comment"># 8  2.0  2.0  2.0  2.0</span></span><br></pre></td></tr></table></figure>

<h3 id="join-合并方式"><a href="#join-合并方式" class="headerlink" title="join (合并方式)"></a>join (合并方式)</h3><p><code>join=&#39;outer&#39;</code>为预设值，因此未设定任何参数时，函数默认<code>join=&#39;outer&#39;</code>。此方式是依照<code>column</code>来做纵向合并，有相同的<code>column</code>上下合并在一起，其他独自的<code>column</code>个自成列，原本没有值的位置皆以<code>NaN</code>填充。</p>
<p><strong>outer</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集</span></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>, columns=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>], index=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>], index=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#纵向&quot;外&quot;合并df1与df2</span></span><br><span class="line">res = pd.concat([df1, df2], axis=<span class="number">0</span>, join=<span class="string">&#x27;outer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#     a    b    c    d    e</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0  NaN</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0  NaN</span></span><br><span class="line"><span class="comment"># 3  0.0  0.0  0.0  0.0  NaN</span></span><br><span class="line"><span class="comment"># 2  NaN  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 3  NaN  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  NaN  1.0  1.0  1.0  1.0</span></span><br></pre></td></tr></table></figure>

<p><strong>inner</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#承上一个例子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#纵向&quot;内&quot;合并df1与df2</span></span><br><span class="line">res = pd.concat([df1, df2], axis=<span class="number">0</span>, join=<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印结果</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#     b    c    d</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 3  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 3  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  1.0  1.0  1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重置index并打印结果</span></span><br><span class="line">res = pd.concat([df1, df2], axis=<span class="number">0</span>, join=<span class="string">&#x27;inner&#x27;</span>, ignore_index=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#     b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 3  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 5  1.0  1.0  1.0</span></span><br></pre></td></tr></table></figure>

<h3 id="join-axes"><a href="#join-axes" class="headerlink" title="join_axes"></a>join_axes</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集</span></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>, columns=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>], index=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>], index=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#依照`df1.index`进行横向合并</span></span><br><span class="line">res = pd.concat([df1, df2], axis=<span class="number">1</span>, join_axes=[df1.index])</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印结果</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#     a    b    c    d    b    c    d    e</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0  NaN  NaN  NaN  NaN</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 3  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#移除join_axes，并打印结果</span></span><br><span class="line">res = pd.concat([df1, df2], axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#     a    b    c    d    b    c    d    e</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0  NaN  NaN  NaN  NaN</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 3  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  NaN  NaN  NaN  NaN  1.0  1.0  1.0  1.0</span></span><br></pre></td></tr></table></figure>

<h3 id="append"><a href="#append" class="headerlink" title="append ()"></a>append ()</h3><p><code>append</code>只有纵向合并，没有横向合并</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集</span></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>, columns=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">df3 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">s1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#将df2合并到df1的下面，以及重置index，并打印出结果</span></span><br><span class="line">res = df1.append(df2, ignore_index=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#     a    b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 3  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 5  1.0  1.0  1.0  1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#合并多个df，将df2与df3合并至df1的下面，以及重置index，并打印出结果</span></span><br><span class="line">res = df1.append([df2, df3], ignore_index=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#     a    b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 3  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 5  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 6  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 7  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 8  1.0  1.0  1.0  1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#合并series，将s1合并至df1，以及重置index，并打印出结果</span></span><br><span class="line">res = df1.append(s1, ignore_index=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#     a    b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 3  1.0  2.0  3.0  4.0</span></span><br></pre></td></tr></table></figure>



<h2 id="合并-merge"><a href="#合并-merge" class="headerlink" title="合并 merge"></a>合并 merge</h2><h3 id="依据一组key合并"><a href="#依据一组key合并" class="headerlink" title="依据一组key合并"></a>依据一组key合并</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集并打印出</span></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>, <span class="string">&#x27;K3&#x27;</span>],</span><br><span class="line">                       <span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;A1&#x27;</span>, <span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;A3&#x27;</span>],</span><br><span class="line">                       <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>, <span class="string">&#x27;K3&#x27;</span>],</span><br><span class="line">                        <span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;C1&#x27;</span>, <span class="string">&#x27;C2&#x27;</span>, <span class="string">&#x27;C3&#x27;</span>],</span><br><span class="line">                        <span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;D1&#x27;</span>, <span class="string">&#x27;D2&#x27;</span>, <span class="string">&#x27;D3&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(left)</span><br><span class="line"><span class="comment">#    A   B key</span></span><br><span class="line"><span class="comment"># 0  A0  B0  K0</span></span><br><span class="line"><span class="comment"># 1  A1  B1  K1</span></span><br><span class="line"><span class="comment"># 2  A2  B2  K2</span></span><br><span class="line"><span class="comment"># 3  A3  B3  K3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(right)</span><br><span class="line"><span class="comment">#    C   D key</span></span><br><span class="line"><span class="comment"># 0  C0  D0  K0</span></span><br><span class="line"><span class="comment"># 1  C1  D1  K1</span></span><br><span class="line"><span class="comment"># 2  C2  D2  K2</span></span><br><span class="line"><span class="comment"># 3  C3  D3  K3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#依据key column合并，并打印出</span></span><br><span class="line">res = pd.merge(left, right, on=<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">     A   B  key  C   D</span><br><span class="line"><span class="comment"># 0  A0  B0  K0  C0  D0</span></span><br><span class="line"><span class="comment"># 1  A1  B1  K1  C1  D1</span></span><br><span class="line"><span class="comment"># 2  A2  B2  K2  C2  D2</span></span><br><span class="line"><span class="comment"># 3  A3  B3  K3  C3  D3</span></span><br></pre></td></tr></table></figure>

<h3 id="依据两组key合并"><a href="#依据两组key合并" class="headerlink" title="依据两组key合并"></a>依据两组key合并</h3><p>合并时有4种方法<code>how = [&#39;left&#39;, &#39;right&#39;, &#39;outer&#39;, &#39;inner&#39;]</code>，预设值<code>how=&#39;inner&#39;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集并打印出</span></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">&#x27;key1&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>],</span><br><span class="line">                     <span class="string">&#x27;key2&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>],</span><br><span class="line">                        <span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;A1&#x27;</span>, <span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;A3&#x27;</span>],</span><br><span class="line">                        <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">&#x27;key1&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>],</span><br><span class="line">                      <span class="string">&#x27;key2&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>],</span><br><span class="line">                         <span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;C1&#x27;</span>, <span class="string">&#x27;C2&#x27;</span>, <span class="string">&#x27;C3&#x27;</span>],</span><br><span class="line">                         <span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;D1&#x27;</span>, <span class="string">&#x27;D2&#x27;</span>, <span class="string">&#x27;D3&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(left)</span><br><span class="line"><span class="comment">#    A   B key1 key2</span></span><br><span class="line"><span class="comment"># 0  A0  B0   K0   K0</span></span><br><span class="line"><span class="comment"># 1  A1  B1   K0   K1</span></span><br><span class="line"><span class="comment"># 2  A2  B2   K1   K0</span></span><br><span class="line"><span class="comment"># 3  A3  B3   K2   K1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(right)</span><br><span class="line"><span class="comment">#    C   D key1 key2</span></span><br><span class="line"><span class="comment"># 0  C0  D0   K0   K0</span></span><br><span class="line"><span class="comment"># 1  C1  D1   K1   K0</span></span><br><span class="line"><span class="comment"># 2  C2  D2   K1   K0</span></span><br><span class="line"><span class="comment"># 3  C3  D3   K2   K0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#依据key1与key2 columns进行合并，并打印出四种结果[&#x27;left&#x27;, &#x27;right&#x27;, &#x27;outer&#x27;, &#x27;inner&#x27;]</span></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>], how=<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#    A   B key1 key2   C   D</span></span><br><span class="line"><span class="comment"># 0  A0  B0   K0   K0  C0  D0</span></span><br><span class="line"><span class="comment"># 1  A2  B2   K1   K0  C1  D1</span></span><br><span class="line"><span class="comment"># 2  A2  B2   K1   K0  C2  D2</span></span><br><span class="line"></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>], how=<span class="string">&#x27;outer&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#     A    B key1 key2    C    D</span></span><br><span class="line"><span class="comment"># 0   A0   B0   K0   K0   C0   D0</span></span><br><span class="line"><span class="comment"># 1   A1   B1   K0   K1  NaN  NaN</span></span><br><span class="line"><span class="comment"># 2   A2   B2   K1   K0   C1   D1</span></span><br><span class="line"><span class="comment"># 3   A2   B2   K1   K0   C2   D2</span></span><br><span class="line"><span class="comment"># 4   A3   B3   K2   K1  NaN  NaN</span></span><br><span class="line"><span class="comment"># 5  NaN  NaN   K2   K0   C3   D3</span></span><br><span class="line"></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>], how=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#    A   B key1 key2    C    D</span></span><br><span class="line"><span class="comment"># 0  A0  B0   K0   K0   C0   D0</span></span><br><span class="line"><span class="comment"># 1  A1  B1   K0   K1  NaN  NaN</span></span><br><span class="line"><span class="comment"># 2  A2  B2   K1   K0   C1   D1</span></span><br><span class="line"><span class="comment"># 3  A2  B2   K1   K0   C2   D2</span></span><br><span class="line"><span class="comment"># 4  A3  B3   K2   K1  NaN  NaN</span></span><br><span class="line"></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>], how=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#     A    B key1 key2   C   D</span></span><br><span class="line"><span class="comment"># 0   A0   B0   K0   K0  C0  D0</span></span><br><span class="line"><span class="comment"># 1   A2   B2   K1   K0  C1  D1</span></span><br><span class="line"><span class="comment"># 2   A2   B2   K1   K0  C2  D2</span></span><br><span class="line"><span class="comment"># 3  NaN  NaN   K2   K0  C3  D3</span></span><br></pre></td></tr></table></figure>

<h3 id="Indicator"><a href="#Indicator" class="headerlink" title="Indicator"></a>Indicator</h3><p><code>indicator=True</code>会将合并的记录放在新的一列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集并打印出</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;col1&#x27;</span>:[<span class="number">0</span>,<span class="number">1</span>], <span class="string">&#x27;col_left&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]&#125;)</span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;col1&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],<span class="string">&#x27;col_right&#x27;</span>:[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="comment">#    col1  col_left</span></span><br><span class="line"><span class="comment"># 0     0        a</span></span><br><span class="line"><span class="comment"># 1     1        b</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="comment">#    col1  col_right</span></span><br><span class="line"><span class="comment"># 0     1          2</span></span><br><span class="line"><span class="comment"># 1     2          2</span></span><br><span class="line"><span class="comment"># 2     2          2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 依据col1进行合并，并启用indicator=True，最后打印出</span></span><br><span class="line">res = pd.merge(df1, df2, on=<span class="string">&#x27;col1&#x27;</span>, how=<span class="string">&#x27;outer&#x27;</span>, indicator=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#   col1 col_left  col_right      _merge</span></span><br><span class="line"><span class="comment"># 0   0.0        a        NaN   left_only</span></span><br><span class="line"><span class="comment"># 1   1.0        b        2.0        both</span></span><br><span class="line"><span class="comment"># 2   2.0      NaN        2.0  right_only</span></span><br><span class="line"><span class="comment"># 3   2.0      NaN        2.0  right_only</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定indicator column的名称，并打印出</span></span><br><span class="line">res = pd.merge(df1, df2, on=<span class="string">&#x27;col1&#x27;</span>, how=<span class="string">&#x27;outer&#x27;</span>, indicator=<span class="string">&#x27;indicator_column&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#   col1 col_left  col_right indicator_column</span></span><br><span class="line"><span class="comment"># 0   0.0        a        NaN        left_only</span></span><br><span class="line"><span class="comment"># 1   1.0        b        2.0             both</span></span><br><span class="line"><span class="comment"># 2   2.0      NaN        2.0       right_only</span></span><br><span class="line"><span class="comment"># 3   2.0      NaN        2.0       right_only</span></span><br></pre></td></tr></table></figure>

<h3 id="依据index合并"><a href="#依据index合并" class="headerlink" title="依据index合并"></a>依据index合并</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集并打印出</span></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;A1&#x27;</span>, <span class="string">&#x27;A2&#x27;</span>],</span><br><span class="line">                     <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>]&#125;,</span><br><span class="line">                     index=[<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>])</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;C2&#x27;</span>, <span class="string">&#x27;C3&#x27;</span>],</span><br><span class="line">                      <span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;D2&#x27;</span>, <span class="string">&#x27;D3&#x27;</span>]&#125;,</span><br><span class="line">                     index=[<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>, <span class="string">&#x27;K3&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(left)</span><br><span class="line"><span class="comment">#     A   B</span></span><br><span class="line"><span class="comment"># K0  A0  B0</span></span><br><span class="line"><span class="comment"># K1  A1  B1</span></span><br><span class="line"><span class="comment"># K2  A2  B2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(right)</span><br><span class="line"><span class="comment">#     C   D</span></span><br><span class="line"><span class="comment"># K0  C0  D0</span></span><br><span class="line"><span class="comment"># K2  C2  D2</span></span><br><span class="line"><span class="comment"># K3  C3  D3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#依据左右资料集的index进行合并，how=&#x27;outer&#x27;,并打印出</span></span><br><span class="line">res = pd.merge(left, right, left_index=<span class="literal">True</span>, right_index=<span class="literal">True</span>, how=<span class="string">&#x27;outer&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#      A    B    C    D</span></span><br><span class="line"><span class="comment"># K0   A0   B0   C0   D0</span></span><br><span class="line"><span class="comment"># K1   A1   B1  NaN  NaN</span></span><br><span class="line"><span class="comment"># K2   A2   B2   C2   D2</span></span><br><span class="line"><span class="comment"># K3  NaN  NaN   C3   D3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#依据左右资料集的index进行合并，how=&#x27;inner&#x27;,并打印出</span></span><br><span class="line">res = pd.merge(left, right, left_index=<span class="literal">True</span>, right_index=<span class="literal">True</span>, how=<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#     A   B   C   D</span></span><br><span class="line"><span class="comment"># K0  A0  B0  C0  D0</span></span><br><span class="line"><span class="comment"># K2  A2  B2  C2  D2</span></span><br></pre></td></tr></table></figure>

<h3 id="解决overlapping的问题"><a href="#解决overlapping的问题" class="headerlink" title="解决overlapping的问题"></a>解决overlapping的问题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集</span></span><br><span class="line">boys = pd.DataFrame(&#123;<span class="string">&#x27;k&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>], <span class="string">&#x27;age&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;)</span><br><span class="line">girls = pd.DataFrame(&#123;<span class="string">&#x27;k&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K3&#x27;</span>], <span class="string">&#x27;age&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用suffixes解决overlapping的问题</span></span><br><span class="line">res = pd.merge(boys, girls, on=<span class="string">&#x27;k&#x27;</span>, suffixes=[<span class="string">&#x27;_boy&#x27;</span>, <span class="string">&#x27;_girl&#x27;</span>], how=<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#    age_boy   k  age_girl</span></span><br><span class="line"><span class="comment"># 0        1  K0         4</span></span><br><span class="line"><span class="comment"># 1        1  K0         5</span></span><br></pre></td></tr></table></figure>



<h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><h3 id="创建一个Series"><a href="#创建一个Series" class="headerlink" title="创建一个Series"></a>创建一个Series</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成1000个数据</span></span><br><span class="line">data = pd.Series(np.random.randn(<span class="number">1000</span>),index=np.arange(<span class="number">1000</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 为了方便观看效果, 我们累加这个数据</span></span><br><span class="line">data.cumsum()</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas 数据可以直接观看其可视化形式</span></span><br><span class="line">data.plot()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="https://morvanzhou.github.io/static/results/np-pd/3-8-1.png" alt="Pandas plot 出图" style="zoom: 50%;" />

<h3 id="Dataframe-可视化"><a href="#Dataframe-可视化" class="headerlink" title="Dataframe 可视化"></a>Dataframe 可视化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.DataFrame(</span><br><span class="line">    np.random.randn(<span class="number">1000</span>,<span class="number">4</span>),</span><br><span class="line">    index=np.arange(<span class="number">1000</span>),</span><br><span class="line">    columns=<span class="built_in">list</span>(<span class="string">&quot;ABCD&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">data.cumsum()</span><br><span class="line">data.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="https://morvanzhou.github.io/static/results/np-pd/3-8-2.png" alt="Pandas plot 出图" style="zoom:50%;" />

<p>散点图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax = data.plot.scatter(x=<span class="string">&#x27;A&#x27;</span>,y=<span class="string">&#x27;B&#x27;</span>,color=<span class="string">&#x27;DarkBlue&#x27;</span>,label=<span class="string">&#x27;Class1&#x27;</span>)</span><br><span class="line"><span class="comment"># 将之下这个 data 画在上一个 ax 上面</span></span><br><span class="line">data.plot.scatter(x=<span class="string">&#x27;A&#x27;</span>,y=<span class="string">&#x27;C&#x27;</span>,color=<span class="string">&#x27;LightGreen&#x27;</span>,label=<span class="string">&#x27;Class2&#x27;</span>,ax=ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="https://morvanzhou.github.io/static/results/np-pd/3-8-3.png" alt="Pandas plot 出图" style="zoom:50%;" />



]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch</title>
    <url>/2020/08/03/PyTorch/</url>
    <content><![CDATA[<h2 id="Torch-amp-Numpy"><a href="#Torch-amp-Numpy" class="headerlink" title="Torch &amp; Numpy"></a>Torch &amp; Numpy</h2><p>Torch 自称为神经网络界的 Numpy, 能将 torch 产生的 tensor 放在 GPU 中加速运算。</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np_data = np.arange(<span class="number">6</span>).reshape((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">torch_data = torch.from_numpy(np_data)</span><br><span class="line">tensor2array = torch_data.numpy()</span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    <span class="string">&#x27;\nnumpy array:&#x27;</span>, np_data,          <span class="comment"># [[0 1 2], [3 4 5]]</span></span><br><span class="line">    <span class="string">&#x27;\ntorch tensor:&#x27;</span>, torch_data,      <span class="comment">#  0  1  2 \n 3  4  5    [torch.LongTensor of size 2x3]</span></span><br><span class="line">    <span class="string">&#x27;\ntensor to array:&#x27;</span>, tensor2array, <span class="comment"># [[0 1 2], [3 4 5]]</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h2 id="Torch-中的数学运算"><a href="#Torch-中的数学运算" class="headerlink" title="Torch 中的数学运算"></a>Torch 中的数学运算</h2><h3 id="普通计算"><a href="#普通计算" class="headerlink" title="普通计算"></a>普通计算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># abs 绝对值计算</span></span><br><span class="line">data = [-<span class="number">1</span>, -<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">tensor = torch.FloatTensor(data)  <span class="comment"># 转换成32位浮点 tensor</span></span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    <span class="string">&#x27;\nabs&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\nnumpy: &#x27;</span>, np.<span class="built_in">abs</span>(data),          <span class="comment"># [1 2 1 2]</span></span><br><span class="line">    <span class="string">&#x27;\ntorch: &#x27;</span>, torch.<span class="built_in">abs</span>(tensor)      <span class="comment"># [1 2 1 2]</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sin   三角函数 sin</span></span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    <span class="string">&#x27;\nsin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\nnumpy: &#x27;</span>, np.sin(data),      <span class="comment"># [-0.84147098 -0.90929743  0.84147098  0.90929743]</span></span><br><span class="line">    <span class="string">&#x27;\ntorch: &#x27;</span>, torch.sin(tensor)  <span class="comment"># [-0.8415 -0.9093  0.8415  0.9093]</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># mean  均值</span></span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    <span class="string">&#x27;\nmean&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\nnumpy: &#x27;</span>, np.mean(data),         <span class="comment"># 0.0</span></span><br><span class="line">    <span class="string">&#x27;\ntorch: &#x27;</span>, torch.mean(tensor)     <span class="comment"># 0.0</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># matrix multiplication 矩阵点乘</span></span><br><span class="line">data = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">tensor = torch.FloatTensor(data)  <span class="comment"># 转换成32位浮点 tensor</span></span><br><span class="line"><span class="comment"># correct method</span></span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    <span class="string">&#x27;\nmatrix multiplication (matmul)&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\nnumpy: &#x27;</span>, np.matmul(data, data),     <span class="comment"># [[7, 10], [15, 22]]</span></span><br><span class="line">    <span class="string">&#x27;\ntorch: &#x27;</span>, torch.mm(tensor, tensor)   <span class="comment"># [[7, 10], [15, 22]]</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># !!!!  下面是错误的方法 !!!!</span></span><br><span class="line">data = np.array(data)</span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    <span class="string">&#x27;\nmatrix multiplication (dot)&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\nnumpy: &#x27;</span>, data.dot(data),        <span class="comment"># [[7, 10], [15, 22]] 在numpy 中可行</span></span><br><span class="line">    <span class="string">&#x27;\ntorch: &#x27;</span>, tensor.dot(tensor)     <span class="comment"># torch 会转换成 [1,2,3,4].dot([1,2,3,4) = 30.0</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable <span class="comment"># torch 中 Variable 模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先生鸡蛋</span></span><br><span class="line">tensor = torch.FloatTensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="comment"># 把鸡蛋放到篮子里, requires_grad是参不参与误差反向传播, 要不要计算梯度</span></span><br><span class="line">variable = Variable(tensor, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tensor)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> 1  2</span></span><br><span class="line"><span class="string"> 3  4</span></span><br><span class="line"><span class="string">[torch.FloatTensor of size 2x2]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(variable)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Variable containing:</span></span><br><span class="line"><span class="string"> 1  2</span></span><br><span class="line"><span class="string"> 3  4</span></span><br><span class="line"><span class="string">[torch.FloatTensor of size 2x2]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Variable-计算-梯度"><a href="#Variable-计算-梯度" class="headerlink" title="Variable 计算, 梯度"></a>Variable 计算, 梯度</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t_out = torch.mean(tensor*tensor)       <span class="comment"># x^2</span></span><br><span class="line">v_out = torch.mean(variable*variable)   <span class="comment"># x^2</span></span><br><span class="line"><span class="built_in">print</span>(t_out)</span><br><span class="line"><span class="built_in">print</span>(v_out)    <span class="comment"># 7.5</span></span><br></pre></td></tr></table></figure>

<p>Variable 计算时, 它在背景幕布后面一步步默默地搭建着一个庞大的系统, 叫做计算图, computational graph. 这个图是用来干嘛的? 原来是将所有的计算步骤 (节点) 都连接起来, 最后进行误差反向传递的时候, 一次性将所有 variable 里面的修改幅度 (梯度) 都计算出来, 而 tensor 就没有这个能力啦.</p>
<h3 id="获取-Variable-里面的数据"><a href="#获取-Variable-里面的数据" class="headerlink" title="获取 Variable 里面的数据"></a>获取 Variable 里面的数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(variable)     <span class="comment">#  Variable 形式</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Variable containing:</span></span><br><span class="line"><span class="string"> 1  2</span></span><br><span class="line"><span class="string"> 3  4</span></span><br><span class="line"><span class="string">[torch.FloatTensor of size 2x2]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(variable.data)    <span class="comment"># tensor 形式</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> 1  2</span></span><br><span class="line"><span class="string"> 3  4</span></span><br><span class="line"><span class="string">[torch.FloatTensor of size 2x2]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(variable.data.numpy())    <span class="comment"># numpy 形式</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[ 1.  2.]</span></span><br><span class="line"><span class="string"> [ 3.  4.]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h2><h3 id="建立数据集"><a href="#建立数据集" class="headerlink" title="建立数据集"></a>建立数据集</h3><p>创建一些假数据来模拟真实的情况. 比如一个一元二次函数: <code>y = a * x^2 + b</code>, 我们给 <code>y</code> 数据加上一点噪声来更加真实的展示它.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = torch.unsqueeze(torch.linspace(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>), dim=<span class="number">1</span>)  <span class="comment"># x data (tensor), shape=(100, 1)</span></span><br><span class="line">y = x.<span class="built_in">pow</span>(<span class="number">2</span>) + <span class="number">0.2</span>*torch.rand(x.size())                 <span class="comment"># noisy y data (tensor), shape=(100, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">plt.scatter(x.data.numpy(), y.data.numpy())</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="建立神经网络"><a href="#建立神经网络" class="headerlink" title="建立神经网络"></a>建立神经网络</h3><p>建立一个神经网络我们可以直接运用 torch 中的体系. 先定义所有的层属性(<code>__init__()</code>), 然后再一层层搭建(<code>forward(x)</code>)层于层的关系链接. 建立关系的时候, 会用到激励函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F     <span class="comment"># 激励函数都在这</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">torch.nn.Module</span>):</span>  <span class="comment"># 继承 torch 的 Module</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_feature, n_hidden, n_output</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()     <span class="comment"># 继承 __init__ 功能</span></span><br><span class="line">        <span class="comment"># 定义每层用什么样的形式</span></span><br><span class="line">        self.hidden = torch.nn.Linear(n_feature, n_hidden)   <span class="comment"># 隐藏层线性输出</span></span><br><span class="line">        self.predict = torch.nn.Linear(n_hidden, n_output)   <span class="comment"># 输出层线性输出</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span>   <span class="comment"># 这同时也是 Module 中的 forward 功能</span></span><br><span class="line">        <span class="comment"># 正向传播输入值, 神经网络分析出输出值</span></span><br><span class="line">        x = F.relu(self.hidden(x))      <span class="comment"># 激励函数(隐藏层的线性值)</span></span><br><span class="line">        x = self.predict(x)             <span class="comment"># 输出值</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">net = Net(n_feature=<span class="number">1</span>, n_hidden=<span class="number">10</span>, n_output=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(net)  <span class="comment"># net 的结构</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Net (</span></span><br><span class="line"><span class="string">  (hidden): Linear (1 -&gt; 10)</span></span><br><span class="line"><span class="string">  (predict): Linear (10 -&gt; 1)</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="训练网络"><a href="#训练网络" class="headerlink" title="训练网络"></a>训练网络</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># optimizer 是训练的工具</span></span><br><span class="line">optimizer = torch.optim.SGD(net.parameters(), lr=<span class="number">0.2</span>)  <span class="comment"># 传入 net 的所有参数, 学习率</span></span><br><span class="line">loss_func = torch.nn.MSELoss()      <span class="comment"># 预测值和真实值的误差计算公式 (均方差)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    prediction = net(x)     <span class="comment"># 喂给 net 训练数据 x, 输出预测值</span></span><br><span class="line"></span><br><span class="line">    loss = loss_func(prediction, y)     <span class="comment"># 计算两者的误差</span></span><br><span class="line"></span><br><span class="line">    optimizer.zero_grad()   <span class="comment"># 清空上一步的残余更新参数值</span></span><br><span class="line">    loss.backward()         <span class="comment"># 误差反向传播, 计算参数更新值</span></span><br><span class="line">    optimizer.step()        <span class="comment"># 将参数更新值施加到 net 的 parameters 上</span></span><br></pre></td></tr></table></figure>

<h3 id="可视化训练过程"><a href="#可视化训练过程" class="headerlink" title="可视化训练过程"></a>可视化训练过程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.ion()   <span class="comment"># 画图</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接着上面来</span></span><br><span class="line">    <span class="keyword">if</span> t % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># plot and show learning process</span></span><br><span class="line">        plt.cla()</span><br><span class="line">        plt.scatter(x.data.numpy(), y.data.numpy())</span><br><span class="line">        plt.plot(x.data.numpy(), prediction.data.numpy(), <span class="string">&#x27;r-&#x27;</span>, lw=<span class="number">5</span>)</span><br><span class="line">        plt.text(<span class="number">0.5</span>, <span class="number">0</span>, <span class="string">&#x27;Loss=%.4f&#x27;</span> % loss.data.numpy(), fontdict=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;color&#x27;</span>:  <span class="string">&#x27;red&#x27;</span>&#125;)</span><br><span class="line">        plt.pause(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>



<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="建立数据集-1"><a href="#建立数据集-1" class="headerlink" title="建立数据集"></a>建立数据集</h3><p>创建一些假数据来模拟真实的情况. 比如两个二次分布的数据, 不过他们的均值都不一样.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假数据</span></span><br><span class="line">n_data = torch.ones(<span class="number">100</span>, <span class="number">2</span>)         <span class="comment"># 数据的基本形态</span></span><br><span class="line">x0 = torch.normal(<span class="number">2</span>*n_data, <span class="number">1</span>)      <span class="comment"># 类型0 x data (tensor), shape=(100, 2)</span></span><br><span class="line">y0 = torch.zeros(<span class="number">100</span>)               <span class="comment"># 类型0 y data (tensor), shape=(100, )</span></span><br><span class="line">x1 = torch.normal(-<span class="number">2</span>*n_data, <span class="number">1</span>)     <span class="comment"># 类型1 x data (tensor), shape=(100, 1)</span></span><br><span class="line">y1 = torch.ones(<span class="number">100</span>)                <span class="comment"># 类型1 y data (tensor), shape=(100, )</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意 x, y 数据的数据形式是一定要像下面一样 (torch.cat 是在合并数据)</span></span><br><span class="line">x = torch.cat((x0, x1), <span class="number">0</span>).<span class="built_in">type</span>(torch.FloatTensor)  <span class="comment"># FloatTensor = 32-bit floating</span></span><br><span class="line">y = torch.cat((y0, y1), ).<span class="built_in">type</span>(torch.LongTensor)    <span class="comment"># LongTensor = 64-bit integer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.scatter(x.data.numpy()[:, 0], x.data.numpy()[:, 1], c=y.data.numpy(), s=100, lw=0, cmap=&#x27;RdYlGn&#x27;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">plt.scatter(x.data.numpy(), y.data.numpy())</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="建立神经网络-1"><a href="#建立神经网络-1" class="headerlink" title="建立神经网络"></a>建立神经网络</h3><p>建立一个神经网络我们可以直接运用 torch 中的体系. 先定义所有的层属性(<code>__init__()</code>), 然后再一层层搭建(<code>forward(x)</code>)层于层的关系链接. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F     <span class="comment"># 激励函数都在这</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">torch.nn.Module</span>):</span>     <span class="comment"># 继承 torch 的 Module</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_feature, n_hidden, n_output</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()     <span class="comment"># 继承 __init__ 功能</span></span><br><span class="line">        self.hidden = torch.nn.Linear(n_feature, n_hidden)   <span class="comment"># 隐藏层线性输出</span></span><br><span class="line">        self.out = torch.nn.Linear(n_hidden, n_output)       <span class="comment"># 输出层线性输出</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="comment"># 正向传播输入值, 神经网络分析出输出值</span></span><br><span class="line">        x = F.relu(self.hidden(x))      <span class="comment"># 激励函数(隐藏层的线性值)</span></span><br><span class="line">        x = self.out(x)                 <span class="comment"># 输出值, 但是这个不是预测值, 预测值还需要再另外计算</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">net = Net(n_feature=<span class="number">2</span>, n_hidden=<span class="number">10</span>, n_output=<span class="number">2</span>) <span class="comment"># 几个类别就几个 output</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(net)  <span class="comment"># net 的结构</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Net (</span></span><br><span class="line"><span class="string">  (hidden): Linear (2 -&gt; 10)</span></span><br><span class="line"><span class="string">  (out): Linear (10 -&gt; 2)</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="训练网络-1"><a href="#训练网络-1" class="headerlink" title="训练网络"></a>训练网络</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># optimizer 是训练的工具</span></span><br><span class="line">optimizer = torch.optim.SGD(net.parameters(), lr=<span class="number">0.02</span>)  <span class="comment"># 传入 net 的所有参数, 学习率</span></span><br><span class="line"><span class="comment"># 算误差的时候, 注意真实值!不是! one-hot 形式的, 而是1D Tensor, (batch,)</span></span><br><span class="line"><span class="comment"># 但是预测值是2D tensor (batch, n_classes)</span></span><br><span class="line">loss_func = torch.nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    out = net(x)     <span class="comment"># 喂给 net 训练数据 x, 输出分析值</span></span><br><span class="line"></span><br><span class="line">    loss = loss_func(out, y)     <span class="comment"># 计算两者的误差</span></span><br><span class="line"></span><br><span class="line">    optimizer.zero_grad()   <span class="comment"># 清空上一步的残余更新参数值</span></span><br><span class="line">    loss.backward()         <span class="comment"># 误差反向传播, 计算参数更新值</span></span><br><span class="line">    optimizer.step()        <span class="comment"># 将参数更新值施加到 net 的 parameters 上</span></span><br></pre></td></tr></table></figure>

<h3 id="可视化训练过程-1"><a href="#可视化训练过程-1" class="headerlink" title="可视化训练过程"></a>可视化训练过程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.ion()   <span class="comment"># 画图</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接着上面来</span></span><br><span class="line">    <span class="keyword">if</span> t % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        plt.cla()</span><br><span class="line">        <span class="comment"># 过了一道 softmax 的激励函数后的最大概率才是预测值</span></span><br><span class="line">        prediction = torch.<span class="built_in">max</span>(F.softmax(out), <span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">        pred_y = prediction.data.numpy().squeeze()</span><br><span class="line">        target_y = y.data.numpy()</span><br><span class="line">        plt.scatter(x.data.numpy()[:, <span class="number">0</span>], x.data.numpy()[:, <span class="number">1</span>], c=pred_y, s=<span class="number">100</span>, lw=<span class="number">0</span>, cmap=<span class="string">&#x27;RdYlGn&#x27;</span>)</span><br><span class="line">        accuracy = <span class="built_in">sum</span>(pred_y == target_y)/<span class="number">200.</span>  <span class="comment"># 预测中有多少和真实值一样</span></span><br><span class="line">        plt.text(<span class="number">1.5</span>, -<span class="number">4</span>, <span class="string">&#x27;Accuracy=%.2f&#x27;</span> % accuracy, fontdict=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;color&#x27;</span>:  <span class="string">&#x27;red&#x27;</span>&#125;)</span><br><span class="line">        plt.pause(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">plt.ioff()  <span class="comment"># 停止画图</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>



<h2 id="快速搭建网络"><a href="#快速搭建网络" class="headerlink" title="快速搭建网络"></a>快速搭建网络</h2><p>之前写神经网络时用到的步骤. 我们用 <code>net1</code> 代表这种方式搭建的神经网络.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">torch.nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_feature, n_hidden, n_output</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        self.hidden = torch.nn.Linear(n_feature, n_hidden)</span><br><span class="line">        self.predict = torch.nn.Linear(n_hidden, n_output)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = F.relu(self.hidden(x))</span><br><span class="line">        x = self.predict(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">net1 = Net(<span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>)   <span class="comment"># 这是我们用这种方式搭建的 net1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net2 = torch.nn.Sequential(</span><br><span class="line">    torch.nn.Linear(<span class="number">1</span>, <span class="number">10</span>),</span><br><span class="line">    torch.nn.ReLU(),</span><br><span class="line">    torch.nn.Linear(<span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>对比一下两者的结构:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(net1)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Net (</span></span><br><span class="line"><span class="string">  (hidden): Linear (1 -&gt; 10)</span></span><br><span class="line"><span class="string">  (predict): Linear (10 -&gt; 1)</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(net2)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Sequential (</span></span><br><span class="line"><span class="string">  (0): Linear (1 -&gt; 10)</span></span><br><span class="line"><span class="string">  (1): ReLU ()</span></span><br><span class="line"><span class="string">  (2): Linear (10 -&gt; 1)</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>发现 <code>net2</code> 多显示了一些内容, 把激励函数也一同纳入进去了, 但是 <code>net1</code> 中, 激励函数实际上是在 <code>forward()</code> 功能中才被调用的. 这也就说明了, 相比 <code>net2</code>, <code>net1</code> 的好处就是, 你可以根据个人需要更加个性化自己的前向传播过程, 比如(RNN). 不过如果你不需要七七八八的过程,  <code>net2</code> 这种形式更适合.</p>
<h2 id="保存提取"><a href="#保存提取" class="headerlink" title="保存提取"></a>保存提取</h2><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><p>建造数据, 搭建网络:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.manual_seed(<span class="number">1</span>)    <span class="comment"># reproducible</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假数据</span></span><br><span class="line">x = torch.unsqueeze(torch.linspace(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>), dim=<span class="number">1</span>)  <span class="comment"># x data (tensor), shape=(100, 1)</span></span><br><span class="line">y = x.<span class="built_in">pow</span>(<span class="number">2</span>) + <span class="number">0.2</span>*torch.rand(x.size())  <span class="comment"># noisy y data (tensor), shape=(100, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span>():</span></span><br><span class="line">    <span class="comment"># 建网络</span></span><br><span class="line">    net1 = torch.nn.Sequential(</span><br><span class="line">        torch.nn.Linear(<span class="number">1</span>, <span class="number">10</span>),</span><br><span class="line">        torch.nn.ReLU(),</span><br><span class="line">        torch.nn.Linear(<span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">    )</span><br><span class="line">    optimizer = torch.optim.SGD(net1.parameters(), lr=<span class="number">0.5</span>)</span><br><span class="line">    loss_func = torch.nn.MSELoss()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        prediction = net1(x)</span><br><span class="line">        loss = loss_func(prediction, y)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br></pre></td></tr></table></figure>

<p>两种途径来保存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.save(net1, <span class="string">&#x27;net.pkl&#x27;</span>)  <span class="comment"># 保存整个网络</span></span><br><span class="line">torch.save(net1.state_dict(), <span class="string">&#x27;net_params.pkl&#x27;</span>)   <span class="comment"># 只保存网络中的参数 (速度快, 占内存少)</span></span><br></pre></td></tr></table></figure>

<h3 id="提取网络"><a href="#提取网络" class="headerlink" title="提取网络"></a>提取网络</h3><p>提取整个神经网络, 网络大的时候可能会比较慢.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restore_net</span>():</span></span><br><span class="line">    <span class="comment"># restore entire net1 to net2</span></span><br><span class="line">    net2 = torch.load(<span class="string">&#x27;net.pkl&#x27;</span>)</span><br><span class="line">    prediction = net2(x)</span><br></pre></td></tr></table></figure>

<h3 id="只提取网络参数"><a href="#只提取网络参数" class="headerlink" title="只提取网络参数"></a>只提取网络参数</h3><p>这种方式将会提取所有的参数, 然后再放到新建网络中.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restore_params</span>():</span></span><br><span class="line">    <span class="comment"># 新建 net3</span></span><br><span class="line">    net3 = torch.nn.Sequential(</span><br><span class="line">        torch.nn.Linear(<span class="number">1</span>, <span class="number">10</span>),</span><br><span class="line">        torch.nn.ReLU(),</span><br><span class="line">        torch.nn.Linear(<span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将保存的参数复制到 net3</span></span><br><span class="line">    net3.load_state_dict(torch.load(<span class="string">&#x27;net_params.pkl&#x27;</span>))</span><br><span class="line">    prediction = net3(x)</span><br></pre></td></tr></table></figure>



<h2 id="批训练"><a href="#批训练" class="headerlink" title="批训练"></a>批训练</h2><h3 id="DataLoader"><a href="#DataLoader" class="headerlink" title="DataLoader"></a>DataLoader</h3><p><code>DataLoader</code> 是 torch 提供包装数据的工具. 所以你要将 (numpy array 或其他) 数据形式装换成 Tensor, 然后再放进这个包装器中. 使用 <code>DataLoader</code> 能够帮助有效地迭代数据, 举例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data</span><br><span class="line">torch.manual_seed(<span class="number">1</span>)    <span class="comment"># reproducible</span></span><br><span class="line"></span><br><span class="line">BATCH_SIZE = <span class="number">5</span>      <span class="comment"># 批训练的数据个数</span></span><br><span class="line"></span><br><span class="line">x = torch.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>)       <span class="comment"># x data (torch tensor)</span></span><br><span class="line">y = torch.linspace(<span class="number">10</span>, <span class="number">1</span>, <span class="number">10</span>)       <span class="comment"># y data (torch tensor)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先转换成 torch 能识别的 Dataset</span></span><br><span class="line">torch_dataset = Data.TensorDataset(data_tensor=x, target_tensor=y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 dataset 放入 DataLoader</span></span><br><span class="line">loader = Data.DataLoader(</span><br><span class="line">    dataset=torch_dataset,      <span class="comment"># torch TensorDataset format</span></span><br><span class="line">    batch_size=BATCH_SIZE,      <span class="comment"># mini batch size</span></span><br><span class="line">    shuffle=<span class="literal">True</span>,               <span class="comment"># 要不要打乱数据 (打乱比较好)</span></span><br><span class="line">    num_workers=<span class="number">2</span>,              <span class="comment"># 多线程来读数据</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):   <span class="comment"># 训练所有!整套!数据 3 次</span></span><br><span class="line">    <span class="keyword">for</span> step, (batch_x, batch_y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(loader):  <span class="comment"># 每一步 loader 释放一小批数据用来学习</span></span><br><span class="line">        <span class="comment"># 假设这里就是你训练的地方...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打出来一些数据</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Epoch: &#x27;</span>, epoch, <span class="string">&#x27;| Step: &#x27;</span>, step, <span class="string">&#x27;| batch x: &#x27;</span>,</span><br><span class="line">              batch_x.numpy(), <span class="string">&#x27;| batch y: &#x27;</span>, batch_y.numpy())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Epoch:  0 | Step:  0 | batch x:  [ 6.  7.  2.  3.  1.] | batch y:  [  5.   4.   9.   8.  10.]</span></span><br><span class="line"><span class="string">Epoch:  0 | Step:  1 | batch x:  [  9.  10.   4.   8.   5.] | batch y:  [ 2.  1.  7.  3.  6.]</span></span><br><span class="line"><span class="string">Epoch:  1 | Step:  0 | batch x:  [  3.   4.   2.   9.  10.] | batch y:  [ 8.  7.  9.  2.  1.]</span></span><br><span class="line"><span class="string">Epoch:  1 | Step:  1 | batch x:  [ 1.  7.  8.  5.  6.] | batch y:  [ 10.   4.   3.   6.   5.]</span></span><br><span class="line"><span class="string">Epoch:  2 | Step:  0 | batch x:  [ 3.  9.  2.  6.  7.] | batch y:  [ 8.  2.  9.  5.  4.]</span></span><br><span class="line"><span class="string">Epoch:  2 | Step:  1 | batch x:  [ 10.   4.   8.   1.   5.] | batch y:  [  1.   7.   3.  10.   6.]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>可以看出, 每步都导出了5个数据进行学习. 然后每个 epoch 的导出数据都是先打乱了以后再导出.</p>
<p>如果改变一下 <code>BATCH_SIZE = 8</code>, 这样 <code>step=0</code> 会导出8个数据, 但是, <code>step=1</code> 时数据库中的数据不够 8个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BATCH_SIZE = <span class="number">8</span>      <span class="comment"># 批训练的数据个数</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ...:</span><br><span class="line">    <span class="keyword">for</span> ...:</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Epoch: &#x27;</span>, epoch, <span class="string">&#x27;| Step: &#x27;</span>, step, <span class="string">&#x27;| batch x: &#x27;</span>,</span><br><span class="line">              batch_x.numpy(), <span class="string">&#x27;| batch y: &#x27;</span>, batch_y.numpy())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Epoch:  0 | Step:  0 | batch x:  [  6.   7.   2.   3.   1.   9.  10.   4.] | batch y:  [  5.   4.   9.   8.  10.   2.   1.   7.]</span></span><br><span class="line"><span class="string">Epoch:  0 | Step:  1 | batch x:  [ 8.  5.] | batch y:  [ 3.  6.]</span></span><br><span class="line"><span class="string">Epoch:  1 | Step:  0 | batch x:  [  3.   4.   2.   9.  10.   1.   7.   8.] | batch y:  [  8.   7.   9.   2.   1.  10.   4.   3.]</span></span><br><span class="line"><span class="string">Epoch:  1 | Step:  1 | batch x:  [ 5.  6.] | batch y:  [ 6.  5.]</span></span><br><span class="line"><span class="string">Epoch:  2 | Step:  0 | batch x:  [  3.   9.   2.   6.   7.  10.   4.   8.] | batch y:  [ 8.  2.  9.  5.  4.  1.  7.  3.]</span></span><br><span class="line"><span class="string">Epoch:  2 | Step:  1 | batch x:  [ 1.  5.] | batch y:  [ 10.   6.]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h2><h3 id="MNIST手写数据"><a href="#MNIST手写数据" class="headerlink" title="MNIST手写数据"></a>MNIST手写数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data</span><br><span class="line"><span class="keyword">import</span> torchvision      <span class="comment"># 数据库模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)    <span class="comment"># reproducible</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hyper Parameters</span></span><br><span class="line">EPOCH = <span class="number">1</span>           <span class="comment"># 训练整批数据多少次, 为了节约时间, 我们只训练一次</span></span><br><span class="line">BATCH_SIZE = <span class="number">50</span></span><br><span class="line">LR = <span class="number">0.001</span>          <span class="comment"># 学习率</span></span><br><span class="line">DOWNLOAD_MNIST = <span class="literal">True</span>  <span class="comment"># 如果你已经下载好了mnist数据就写上 False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mnist 手写数字</span></span><br><span class="line">train_data = torchvision.datasets.MNIST(</span><br><span class="line">    root=<span class="string">&#x27;./mnist/&#x27;</span>,    <span class="comment"># 保存或者提取位置</span></span><br><span class="line">    train=<span class="literal">True</span>,  <span class="comment"># this is training data</span></span><br><span class="line">    transform=torchvision.transforms.ToTensor(),    <span class="comment"># 转换 PIL.Image or numpy.ndarray 成</span></span><br><span class="line">                                                    <span class="comment"># torch.FloatTensor (C x H x W), 训练的时候 normalize 成 [0.0, 1.0] 区间</span></span><br><span class="line">    download=DOWNLOAD_MNIST,          <span class="comment"># 没下载就下载, 下载了就不用再下了</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>测试数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data = torchvision.datasets.MNIST(root=<span class="string">&#x27;./mnist/&#x27;</span>, train=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批训练 50samples, 1 channel, 28x28 (50, 1, 28, 28)</span></span><br><span class="line">train_loader = Data.DataLoader(dataset=train_data, batch_size=BATCH_SIZE, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了节约时间, 我们测试时只测试前2000个</span></span><br><span class="line">test_x = torch.unsqueeze(test_data.test_data, dim=<span class="number">1</span>).<span class="built_in">type</span>(torch.FloatTensor)[:<span class="number">2000</span>]/<span class="number">255.</span>   <span class="comment"># shape from (2000, 28, 28) to (2000, 1, 28, 28), value in range(0,1)</span></span><br><span class="line">test_y = test_data.test_labels[:<span class="number">2000</span>]</span><br></pre></td></tr></table></figure>

<h3 id="CNN模型"><a href="#CNN模型" class="headerlink" title="CNN模型"></a>CNN模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNN</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(CNN, self).__init__()</span><br><span class="line">        self.conv1 = nn.Sequential(  <span class="comment"># input shape (1, 28, 28)</span></span><br><span class="line">            nn.Conv2d(</span><br><span class="line">                in_channels=<span class="number">1</span>,      <span class="comment"># input height</span></span><br><span class="line">                out_channels=<span class="number">16</span>,    <span class="comment"># n_filters</span></span><br><span class="line">                kernel_size=<span class="number">5</span>,      <span class="comment"># filter size</span></span><br><span class="line">                stride=<span class="number">1</span>,           <span class="comment"># filter movement/step</span></span><br><span class="line">                padding=<span class="number">2</span>,      <span class="comment"># 如果想要 con2d 出来的图片长宽没有变化, padding=(kernel_size-1)/2 当 stride=1</span></span><br><span class="line">            ),      <span class="comment"># output shape (16, 28, 28)</span></span><br><span class="line">            nn.ReLU(),    <span class="comment"># activation</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),    <span class="comment"># 在 2x2 空间里向下采样, output shape (16, 14, 14)</span></span><br><span class="line">        )</span><br><span class="line">        self.conv2 = nn.Sequential(  <span class="comment"># input shape (16, 14, 14)</span></span><br><span class="line">            nn.Conv2d(<span class="number">16</span>, <span class="number">32</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>),  <span class="comment"># output shape (32, 14, 14)</span></span><br><span class="line">            nn.ReLU(),  <span class="comment"># activation</span></span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),  <span class="comment"># output shape (32, 7, 7)</span></span><br><span class="line">        )</span><br><span class="line">        self.out = nn.Linear(<span class="number">32</span> * <span class="number">7</span> * <span class="number">7</span>, <span class="number">10</span>)   <span class="comment"># fully connected layer, output 10 classes</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), -<span class="number">1</span>)   <span class="comment"># 展平多维的卷积图成 (batch_size, 32 * 7 * 7)</span></span><br><span class="line">        output = self.out(x)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">cnn = CNN()</span><br><span class="line"><span class="built_in">print</span>(cnn)  <span class="comment"># net architecture</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">CNN (</span></span><br><span class="line"><span class="string">  (conv1): Sequential (</span></span><br><span class="line"><span class="string">    (0): Conv2d(1, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span></span><br><span class="line"><span class="string">    (1): ReLU ()</span></span><br><span class="line"><span class="string">    (2): MaxPool2d (size=(2, 2), stride=(2, 2), dilation=(1, 1))</span></span><br><span class="line"><span class="string">  )</span></span><br><span class="line"><span class="string">  (conv2): Sequential (</span></span><br><span class="line"><span class="string">    (0): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span></span><br><span class="line"><span class="string">    (1): ReLU ()</span></span><br><span class="line"><span class="string">    (2): MaxPool2d (size=(2, 2), stride=(2, 2), dilation=(1, 1))</span></span><br><span class="line"><span class="string">  )</span></span><br><span class="line"><span class="string">  (out): Linear (1568 -&gt; 10)</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">optimizer = torch.optim.Adam(cnn.parameters(), lr=LR)   <span class="comment"># optimize all cnn parameters</span></span><br><span class="line">loss_func = nn.CrossEntropyLoss()   <span class="comment"># the target label is not one-hotted</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># training and testing</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(EPOCH):</span><br><span class="line">    <span class="keyword">for</span> step, (b_x, b_y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):   <span class="comment"># 分配 batch data, normalize x when iterate train_loader</span></span><br><span class="line">        output = cnn(b_x)               <span class="comment"># cnn output</span></span><br><span class="line">        loss = loss_func(output, b_y)   <span class="comment"># cross entropy loss</span></span><br><span class="line">        optimizer.zero_grad()           <span class="comment"># clear gradients for this training step</span></span><br><span class="line">        loss.backward()                 <span class="comment"># backpropagation, compute gradients</span></span><br><span class="line">        optimizer.step()                <span class="comment"># apply gradients</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">Epoch:  0 | train loss: 0.0306 | test accuracy: 0.97</span></span><br><span class="line"><span class="string">Epoch:  0 | train loss: 0.0147 | test accuracy: 0.98</span></span><br><span class="line"><span class="string">Epoch:  0 | train loss: 0.0427 | test accuracy: 0.98</span></span><br><span class="line"><span class="string">Epoch:  0 | train loss: 0.0078 | test accuracy: 0.98</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>取10个数据, 看预测的值到底对不对:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">est_output = cnn(test_x[:<span class="number">10</span>])</span><br><span class="line">pred_y = torch.<span class="built_in">max</span>(test_output, <span class="number">1</span>)[<span class="number">1</span>].data.numpy().squeeze()</span><br><span class="line"><span class="built_in">print</span>(pred_y, <span class="string">&#x27;prediction number&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(test_y[:<span class="number">10</span>].numpy(), <span class="string">&#x27;real number&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[7 2 1 0 4 1 4 9 5 9] prediction number</span></span><br><span class="line"><span class="string">[7 2 1 0 4 1 4 9 5 9] real number</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="LSTM-分类"><a href="#LSTM-分类" class="headerlink" title="LSTM 分类"></a>LSTM 分类</h2><h3 id="MNIST手写数据-1"><a href="#MNIST手写数据-1" class="headerlink" title="MNIST手写数据"></a>MNIST手写数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision.datasets <span class="keyword">as</span> dsets</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)    <span class="comment"># reproducible</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hyper Parameters</span></span><br><span class="line">EPOCH = <span class="number">1</span>           <span class="comment"># 训练整批数据多少次, 为了节约时间, 我们只训练一次</span></span><br><span class="line">BATCH_SIZE = <span class="number">64</span></span><br><span class="line">TIME_STEP = <span class="number">28</span>      <span class="comment"># rnn 时间步数 / 图片高度</span></span><br><span class="line">INPUT_SIZE = <span class="number">28</span>     <span class="comment"># rnn 每步输入值 / 图片每行像素</span></span><br><span class="line">LR = <span class="number">0.01</span>           <span class="comment"># learning rate</span></span><br><span class="line">DOWNLOAD_MNIST = <span class="literal">True</span>  <span class="comment"># 如果你已经下载好了mnist数据就写上 Fasle</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mnist 手写数字</span></span><br><span class="line">train_data = torchvision.datasets.MNIST(</span><br><span class="line">    root=<span class="string">&#x27;./mnist/&#x27;</span>,    <span class="comment"># 保存或者提取位置</span></span><br><span class="line">    train=<span class="literal">True</span>,  <span class="comment"># this is training data</span></span><br><span class="line">    transform=torchvision.transforms.ToTensor(),    <span class="comment"># 转换 PIL.Image or numpy.ndarray 成</span></span><br><span class="line">                                                    <span class="comment"># torch.FloatTensor (C x H x W), 训练的时候 normalize 成 [0.0, 1.0] 区间</span></span><br><span class="line">    download=DOWNLOAD_MNIST,          <span class="comment"># 没下载就下载, 下载了就不用再下了</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>测试数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data = torchvision.datasets.MNIST(root=<span class="string">&#x27;./mnist/&#x27;</span>, train=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批训练 50samples, 1 channel, 28x28 (50, 1, 28, 28)</span></span><br><span class="line">train_loader = Data.DataLoader(dataset=train_data, batch_size=BATCH_SIZE, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了节约时间, 我们测试时只测试前2000个</span></span><br><span class="line">test_x = torch.unsqueeze(test_data.test_data, dim=<span class="number">1</span>).<span class="built_in">type</span>(torch.FloatTensor)[:<span class="number">2000</span>]/<span class="number">255.</span>   <span class="comment"># shape from (2000, 28, 28) to (2000, 1, 28, 28), value in range(0,1)</span></span><br><span class="line">test_y = test_data.test_labels[:<span class="number">2000</span>]</span><br></pre></td></tr></table></figure>

<h3 id="RNN模型"><a href="#RNN模型" class="headerlink" title="RNN模型"></a>RNN模型</h3><p>用一个 class 来建立 RNN 模型. 这个 RNN 整体流程是</p>
<ol>
<li><code>(input0, state0)</code> -&gt; <code>LSTM</code> -&gt; <code>(output0, state1)</code>;</li>
<li><code>(input1, state1)</code> -&gt; <code>LSTM</code> -&gt; <code>(output1, state2)</code>;</li>
<li>…</li>
<li><code>(inputN, stateN)</code>-&gt; <code>LSTM</code> -&gt; <code>(outputN, stateN+1)</code>;</li>
<li><code>outputN</code> -&gt; <code>Linear</code> -&gt; <code>prediction</code>. 通过<code>LSTM</code>分析每一时刻的值, 并且将这一时刻和前面时刻的理解合并在一起, 生成当前时刻对前面数据的理解或记忆. 传递这种理解给下一时刻分析.    </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RNN</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(RNN, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.rnn = nn.LSTM(     <span class="comment"># LSTM 效果要比 nn.RNN() 好多了</span></span><br><span class="line">            input_size=<span class="number">28</span>,      <span class="comment"># 图片每行的数据像素点</span></span><br><span class="line">            hidden_size=<span class="number">64</span>,     <span class="comment"># rnn hidden unit</span></span><br><span class="line">            num_layers=<span class="number">1</span>,       <span class="comment"># 有几层 RNN layers</span></span><br><span class="line">            batch_first=<span class="literal">True</span>,   <span class="comment"># input &amp; output 会是以 batch size 为第一维度的特征集 e.g. (batch, time_step, input_size)</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.out = nn.Linear(<span class="number">64</span>, <span class="number">10</span>)    <span class="comment"># 输出层</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="comment"># x shape (batch, time_step, input_size)</span></span><br><span class="line">        <span class="comment"># r_out shape (batch, time_step, output_size)</span></span><br><span class="line">        <span class="comment"># h_n shape (n_layers, batch, hidden_size)   LSTM 有两个 hidden states, h_n 是分线, h_c 是主线</span></span><br><span class="line">        <span class="comment"># h_c shape (n_layers, batch, hidden_size)</span></span><br><span class="line">        r_out, (h_n, h_c) = self.rnn(x, <span class="literal">None</span>)   <span class="comment"># None 表示 hidden state 会用全0的 state</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 选取最后一个时间点的 r_out 输出</span></span><br><span class="line">        <span class="comment"># 这里 r_out[:, -1, :] 的值也是 h_n 的值</span></span><br><span class="line">        out = self.out(r_out[:, -<span class="number">1</span>, :])</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">rnn = RNN()</span><br><span class="line"><span class="built_in">print</span>(rnn)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">RNN (</span></span><br><span class="line"><span class="string">  (rnn): LSTM(28, 64, batch_first=True)</span></span><br><span class="line"><span class="string">  (out): Linear (64 -&gt; 10)</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="训练-1"><a href="#训练-1" class="headerlink" title="训练"></a>训练</h3><p>将图片数据看成一个时间上的连续数据, 每一行的像素点都是这个时刻的输入, 读完整张图片就是从上而下的读完了每行的像素点. 然后我们就可以拿出 RNN 在最后一步的分析值判断图片是哪一类了. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">optimizer = torch.optim.Adam(rnn.parameters(), lr=LR)   <span class="comment"># optimize all parameters</span></span><br><span class="line">loss_func = nn.CrossEntropyLoss()   <span class="comment"># the target label is not one-hotted</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># training and testing</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(EPOCH):</span><br><span class="line">    <span class="keyword">for</span> step, (x, b_y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):   <span class="comment"># gives batch data</span></span><br><span class="line">        b_x = x.view(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)   <span class="comment"># reshape x to (batch, time_step, input_size)</span></span><br><span class="line"></span><br><span class="line">        output = rnn(b_x)               <span class="comment"># rnn output</span></span><br><span class="line">        loss = loss_func(output, b_y)   <span class="comment"># cross entropy loss</span></span><br><span class="line">        optimizer.zero_grad()           <span class="comment"># clear gradients for this training step</span></span><br><span class="line">        loss.backward()                 <span class="comment"># backpropagation, compute gradients</span></span><br><span class="line">        optimizer.step()                <span class="comment"># apply gradients</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">Epoch:  0 | train loss: 0.0945 | test accuracy: 0.94</span></span><br><span class="line"><span class="string">Epoch:  0 | train loss: 0.0984 | test accuracy: 0.94</span></span><br><span class="line"><span class="string">Epoch:  0 | train loss: 0.0332 | test accuracy: 0.95</span></span><br><span class="line"><span class="string">Epoch:  0 | train loss: 0.1868 | test accuracy: 0.96</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
</search>
